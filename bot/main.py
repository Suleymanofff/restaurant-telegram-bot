import asyncio
import os
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from fluent.runtime import FluentLocalization, FluentResourceLoader

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from src.utils.config import settings
from src.utils.logger import setup_logging, get_logger
from src.handlers import router as main_router
from src.database.db_manager import DatabaseManager
from src.utils.reminders import start_reminder_system, stop_reminder_system
from src.utils.rate_limiter import rate_limiter
from src.middlewares.fsm_middleware import FSMMiddleware
from src.utils.fsm_cleanup import start_fsm_cleanup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_manager = DatabaseManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –î–û —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞
setup_logging(
    log_level=settings.LOG_LEVEL,
    log_format=settings.LOG_FORMAT,
    enable_file_logging=settings.ENABLE_FILE_LOGGING
)

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = get_logger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
loader = FluentResourceLoader("src/i18n/{locale}")
l10n = FluentLocalization(["ru"], ["text.ftl", "button.ftl"], loader)

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üóÑÔ∏è Initializing database connection...")
        
        # –ü–æ–ª—É—á–∞–µ–º DSN –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        dsn = getattr(settings, 'DATABASE_URL', 'postgresql://garun:origami@localhost/restaurant_bot_with_payment')
        
        await db_manager.init_pool(dsn)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if await db_manager.health_check():
            logger.info("‚úÖ Database connected successfully")
            return True
        else:
            logger.error("‚ùå Database health check failed")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize database: {e}", exc_info=True)
        return False

async def close_database():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await db_manager.close_pool()
        logger.info("‚úÖ Database connection closed")
    except Exception as e:
        logger.error(f"‚ùå Error closing database connection: {e}")


async def cleanup_rate_limits():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π rate limiting"""
    while True:
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
        rate_limiter.cleanup_old_entries()
        logger.debug("üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ rate limiting")


async def init_default_admins(db_manager: DatabaseManager):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        admin_ids = [int(admin_id.strip()) for admin_id in settings.ADMIN_IDS.split(",")]
        staff_ids = [int(staff_id.strip()) for staff_id in settings.STAFF_IDS.split(",")]
        
        for admin_id in admin_ids:
            await db_manager.add_admin(admin_id, "admin", "Default Admin")
            logger.info(f"‚úÖ Added default admin: {admin_id}")
        
        for staff_id in staff_ids:
            await db_manager.add_staff(staff_id, "staff", "Default Staff")
            logger.info(f"‚úÖ Added default staff: {staff_id}")
            
    except Exception as e:
        logger.error(f"‚ùå Failed to init default admins: {e}")

async def main():
    logger.info("üöÄ Starting Restaurant Bot...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_initialized = await init_database()
        if not db_initialized:
            logger.warning("‚ö†Ô∏è  Database not initialized, some features may not work")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await init_default_admins(db_manager)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        logger.info("ü§ñ Initializing bot with token: %s...", settings.BOT_TOKEN[:10] + "..." if settings.BOT_TOKEN else "None")
        
        session = AiohttpSession()
        bot = Bot(
            token=settings.BOT_TOKEN,
            session=session,
            default=DefaultBotProperties(parse_mode="HTML")
        )

        dp = Dispatcher()

        # üî• –î–û–ë–ê–í–õ–Ø–ï–ú MIDDLEWARE –î–õ–Ø FSM
        dp.message.middleware(FSMMiddleware())
        dp.callback_query.middleware(FSMMiddleware())
        
        # –ü–µ—Ä–µ–¥–∞–µ–º l10n –∏ db_manager –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —á–µ—Ä–µ–∑ work_data
        dp.workflow_data.update({
            "l10n": l10n,
            "db_manager": db_manager,
            "settings": settings
        })
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(main_router)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await start_reminder_system(bot, db_manager)
        logger.info("üîî Reminder system started")

        # üÜï –ó–ê–ü–£–°–ö–ê–ï–ú CLEANUP RATE LIMITING (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞)
        asyncio.create_task(cleanup_rate_limits())
        logger.info("üßπ Rate limiting cleanup task started")

        # üî• –ó–ê–ü–£–°–ö–ê–ï–ú FSM CLEANUP SERVICE
        await start_fsm_cleanup(dp.storage)
        logger.info("üßπ FSM cleanup service started")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö
        logger.info("üìã Registered %s routers", len(dp.sub_routers))
        
        logger.info("‚úÖ Bot initialized successfully")
        logger.info("üì° Starting polling...")
        
        await dp.start_polling(bot)
        
    except ValueError as e:
        logger.error("‚ùå Configuration error: %s", e, exc_info=True)
    except KeyError as e:
        logger.error("‚ùå Key error: %s", e, exc_info=True)
    except Exception as e:
        logger.critical("üí• Critical error during bot operation: %s", e, exc_info=True)
        raise
    finally:
        logger.info("üõë Bot stopped")
        await close_database()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        if 'bot' in locals():
            await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Bot interrupted by user")
        os.system("cls" if os.name == 'nt' else "clear")
    except Exception as e:
        logger.critical("üí• Fatal error during bot startup: %s", e, exc_info=True)