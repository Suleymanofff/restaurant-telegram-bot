from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from fluent.runtime import FluentLocalization
import logging
from datetime import datetime
import json

from src.states.broadcast import BroadcastStates
from src.database.db_manager import DatabaseManager
from src.utils.config import settings
from src.utils.logger import get_logger

router = Router()
logger = get_logger(__name__)

class BroadcastManager:
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        self.segments = {
            "all": {"name": "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "filter": {}},
            "male": {"name": "üë® –ú—É–∂—á–∏–Ω—ã", "filter": {"sex": "male"}},
            "female": {"name": "üë© –ñ–µ–Ω—â–∏–Ω—ã", "filter": {"sex": "female"}},
            "students": {"name": "üéì –°—Ç—É–¥–µ–Ω—Ç—ã", "filter": {"major": "student"}},
            "entrepreneurs": {"name": "üíº –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏", "filter": {"major": "entrepreneur"}},
            "employees": {"name": "üíª –†–∞–±–æ—Ç–∞—é—â–∏–µ –ø–æ –Ω–∞–π–º—É", "filter": {"major": "hire"}},
            "freelancers": {"name": "üöÄ –§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã", "filter": {"major": "frilans"}}
        }
        
        # –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        self.content_types = {
            "text": {"name": "üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", "icon": "üìù"},
            "image": {"name": "üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ + —Ç–µ–∫—Å—Ç", "icon": "üñºÔ∏è"}
        }
    
    async def get_segment_users_count(self, segment_key: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–≥–º–µ–Ω—Ç–µ"""
        try:
            if segment_key == "all":
                stats = await self.db_manager.get_general_stats()
                return stats.get('total_users', 0)
            elif segment_key in ["male", "female"]:
                segments = await self.db_manager.get_target_segments()
                return segments.get(f'{segment_key}_count', 0)
            elif segment_key in ["students", "entrepreneurs", "employees", "freelancers"]:
                segment_map = {
                    "students": "students_count",
                    "entrepreneurs": "entrepreneurs_count", 
                    "employees": "employees_count",
                    "freelancers": "freelancers_count"
                }
                segments = await self.db_manager.get_target_segments()
                return segments.get(segment_map[segment_key], 0)
            else:
                # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                stats = await self.db_manager.get_general_stats()
                return max(1, stats.get('total_users', 0) // 10)
        except Exception as e:
            logger.error(f"‚ùå Error getting segment count: {e}")
            return 0
    
    async def send_broadcast_message(self, bot: Bot, user_id: int, message_type: str, 
                                text: str, image_file_id: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        try:
            if message_type == "text":
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode="HTML"
                )
                return True
                
            elif message_type == "image":
                if not image_file_id:
                    logger.error(f"‚ùå No image_file_id for image broadcast to {user_id}")
                    # Fallback to text only
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode="HTML"
                    )
                    return True
                
                try:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ñ–æ—Ç–æ
                    caption = text[:1024] if len(text) > 1024 else text
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=image_file_id,
                        caption=caption,
                        parse_mode="HTML"
                    )
                    return True
                except Exception as photo_error:
                    logger.error(f"‚ùå Failed to send photo to {user_id}: {photo_error}")
                    # Fallback to text only
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"üñºÔ∏è {text}",  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        parse_mode="HTML"
                    )
                    return True
                    
            else:
                # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode="HTML"
                )
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Failed to send broadcast to {user_id}: {e}")
            return False

@router.message(F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
async def start_broadcast(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    try:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
        await db_manager.ensure_user_exists(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        
        broadcast_manager = BroadcastManager(db_manager)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
        builder = InlineKeyboardBuilder()
        
        for segment_key, segment_info in broadcast_manager.segments.items():
            users_count = await broadcast_manager.get_segment_users_count(segment_key)
            builder.button(
                text=f"{segment_info['name']} ({users_count})",
                callback_data=f"broadcast_segment_{segment_key}"
            )
        
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
        builder.adjust(1)
        
        await message.answer(
            "üì§ <b>–°–û–ó–î–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò</b>\n\n"
            "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(BroadcastStates.choosing_segment)
        await db_manager.add_user_action(
            user_id=message.from_user.id,
            action_type='broadcast_started'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error starting broadcast: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()

@router.callback_query(BroadcastStates.choosing_segment, F.data.startswith("broadcast_segment_"))
async def choose_broadcast_segment(callback: CallbackQuery, state: FSMContext, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        segment_key = callback.data.split("_")[2]
        broadcast_manager = BroadcastManager(db_manager)
        
        if segment_key not in broadcast_manager.segments:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç")
            return
        
        segment_info = broadcast_manager.segments[segment_key]
        users_count = await broadcast_manager.get_segment_users_count(segment_key)
        
        await state.update_data(
            segment_key=segment_key,
            segment_name=segment_info["name"],
            users_count=users_count
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        builder = InlineKeyboardBuilder()
        
        for content_key, content_info in broadcast_manager.content_types.items():
            builder.button(
                text=f"{content_info['icon']} {content_info['name']}",
                callback_data=f"broadcast_type_{content_key}"
            )
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_back_to_segments")
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–í—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç:</b> {segment_info['name']}\n"
            f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_count}\n\n"
            "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(BroadcastStates.choosing_type)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error choosing broadcast segment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ–≥–º–µ–Ω—Ç–∞")

@router.callback_query(BroadcastStates.choosing_type, F.data.startswith("broadcast_type_"))
async def choose_broadcast_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        content_type = callback.data.split('_')[2]

        
        
        await state.update_data(content_type=content_type)
        
        if content_type == "text":
            await callback.message.edit_text(
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                "üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞</i>\n"
                "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n" 
                "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
                "‚Ä¢ <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                parse_mode="HTML"
            )
            await state.set_state(BroadcastStates.entering_text)
        elif content_type == "image":
            await callback.message.edit_text(
                "üñºÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª–æ–º)</i>\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                parse_mode="HTML"
            )
            await state.set_state(BroadcastStates.entering_image)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error choosing broadcast type: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞")

@router.message(BroadcastStates.entering_image, F.photo)
async def process_broadcast_image(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        image_file_id = message.photo[-1].file_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ file_id –≤–∞–ª–∏–¥–Ω—ã–π
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await bot.get_file(image_file_id)
            logger.info(f"‚úÖ Image file validated: {file_info.file_id}, size: {file_info.file_size}")
        except Exception as file_error:
            logger.error(f"‚ùå Invalid image file_id: {file_error}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(image_file_id=image_file_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        await message.answer_photo(
            photo=image_file_id,
            caption="‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
                   "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
                   "üí° <i>–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—å—é –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é</i>\n"
                   "‚ö†Ô∏è <i>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1024 —Å–∏–º–≤–æ–ª–∞</i>",
            parse_mode="HTML"
        )
        
        await state.set_state(BroadcastStates.entering_text)
        
    except Exception as e:
        logger.error(f"‚ùå Error processing broadcast image: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

@router.message(BroadcastStates.entering_image)
async def wrong_image_input(message: Message):
    """–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª–æ–º)")

@router.message(BroadcastStates.entering_text, F.text)
async def process_broadcast_text(message: Message, state: FSMContext, bot: Bot, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–∫–∞–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        text = message.text
        
        if text.startswith('/cancel'):
            await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        data = await state.get_data()
        content_type = data.get('content_type', 'text')
        
        if content_type == "image" and len(text) > 1024:
            await message.answer(
                f"‚ùå <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç!</b>\n\n"
                f"–î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏: 1024 —Å–∏–º–≤–æ–ª–∞\n"
                f"–í–∞—à —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                f"–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞:",
                parse_mode="HTML"
            )
            return
        
        await state.update_data(broadcast_text=text)
        
        data = await state.get_data()
        segment_name = data.get('segment_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        users_count = data.get('users_count', 0)
        content_type = data.get('content_type', 'text')
        image_file_id = data.get('image_file_id')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_text = (
            f"üëÅÔ∏è <b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –†–ê–°–°–´–õ–ö–ò</b>\n\n"
            f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {segment_name}\n"
            f"üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_count}\n"
            f"üé® <b>–¢–∏–ø:</b> {content_type}\n\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{text}\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_confirm")
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="broadcast_edit_text")
        builder.button(text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ–≥–º–µ–Ω—Ç", callback_data="broadcast_back_to_segments")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
        builder.adjust(1)
        
        if content_type == "image" and image_file_id:
            try:
                await message.answer_photo(
                    photo=image_file_id,
                    caption=preview_text,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
            except Exception as preview_error:
                logger.error(f"‚ùå Error showing image preview: {preview_error}")
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                    f"{preview_text}",
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
        else:
            await message.answer(
                preview_text,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        
        await state.set_state(BroadcastStates.confirming)
        
    except Exception as e:
        logger.error(f"‚ùå Error processing broadcast text: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")

@router.callback_query(BroadcastStates.confirming, F.data == "broadcast_confirm")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext, bot: Bot, db_manager: DatabaseManager):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()

        data = await state.get_data()
        segment_key = data.get('segment_key')
        segment_name = data.get('segment_name')
        users_count = data.get('users_count', 0)
        content_type = data.get('content_type')
        text = data.get('broadcast_text')
        image_file_id = data.get('image_file_id')
        
        logger.info(f"üì§ Starting broadcast: type={content_type}, segment={segment_key}, users={users_count}, has_image={bool(image_file_id)}")
        
        # –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        progress_message = await callback.message.answer(
            f"üöÄ <b>–ó–ê–ü–£–°–ö –†–ê–°–°–´–õ–ö–ò</b>\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {users_count} —Å–æ–æ–±—â–µ–Ω–∏–π...\n"
            f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
            parse_mode="HTML"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ –ë–î
        broadcast_id = await db_manager.create_broadcast(
            title=f"–†–∞—Å—Å—ã–ª–∫–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            message_text=text,
            target_sex='all',
            target_major='all',
            message_type=content_type,
            image_file_id=image_file_id
        )
        
        if not broadcast_id:
            await progress_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ë–î")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        users = await db_manager.get_users_by_segment(segment_key)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        broadcast_manager = BroadcastManager(db_manager)
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                success = await broadcast_manager.send_broadcast_message(
                    bot=bot,
                    user_id=user['user_id'],
                    message_type=content_type,
                    text=text,
                    image_file_id=image_file_id
                )
                
                if success:
                    sent_count += 1
                else:
                    failed_count += 1
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (sent_count + failed_count) % 10 == 0:
                    try:
                        await progress_message.edit_text(
                            f"üì§ <b>–†–ê–°–°–´–õ–ö–ê –í –ü–†–û–¶–ï–°–°–ï</b>\n\n"
                            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {len(users) - sent_count - failed_count}",
                            parse_mode="HTML"
                        )
                    except Exception as edit_error:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è progress_message: {edit_error}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                        
            except Exception as e:
                logger.error(f"‚ùå Failed to send to {user['user_id']}: {e}")
                failed_count += 1
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_text = (
            f"‚úÖ <b>–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
            f"üìä <b>–ò—Ç–æ–≥–∏:</b>\n"
            f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent_count}\n"
            f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"‚Ä¢ üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {sent_count/max(1, len(users))*100:.1f}%\n\n"
            f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {segment_name}\n"
            f"üé® <b>–¢–∏–ø:</b> {content_type}\n"
            f"üÜî <b>ID —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {broadcast_id}"
        )
        
        if content_type == "image":
            report_text += f"\nüñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {'‚úÖ' if image_file_id else '‚ùå'}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ë–î
        await db_manager.update_broadcast_stats(broadcast_id, sent_count)
        
        await progress_message.edit_text(report_text, parse_mode="HTML")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db_manager.add_user_action(
            user_id=callback.from_user.id,
            action_type='broadcast_completed',
            action_data={
                'broadcast_id': broadcast_id,
                'segment': segment_key,
                'sent_count': sent_count,
                'failed_count': failed_count,
                'content_type': content_type,
                'has_image': bool(image_file_id)
            }
        )
        
        logger.info(f"‚úÖ Broadcast #{broadcast_id} completed: {sent_count} sent, {failed_count} failed")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"‚ùå Error confirming broadcast: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        except Exception as send_error:
            logger.error(f"‚ùå Failed to send error message: {send_error}")
        await state.clear()

@router.callback_query(F.data == "broadcast_back_to_segments")
async def back_to_segments(callback: CallbackQuery, state: FSMContext, db_manager: DatabaseManager, l10n: FluentLocalization):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–µ–≥–º–µ–Ω—Ç–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é start_broadcast, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not settings.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    try:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
        await db_manager.ensure_user_exists(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            full_name=callback.from_user.full_name
        )
        
        broadcast_manager = BroadcastManager(db_manager)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
        builder = InlineKeyboardBuilder()
        
        for segment_key, segment_info in broadcast_manager.segments.items():
            users_count = await broadcast_manager.get_segment_users_count(segment_key)
            builder.button(
                text=f"{segment_info['name']} ({users_count})",
                callback_data=f"broadcast_segment_{segment_key}"
            )
        
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üì§ <b>–°–û–ó–î–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò</b>\n\n"
            "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(BroadcastStates.choosing_segment)
        await db_manager.add_user_action(
            user_id=callback.from_user.id,
            action_type='broadcast_restarted'
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in back_to_segments: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É —Å–µ–≥–º–µ–Ω—Ç–∞")

@router.callback_query(F.data == "broadcast_edit_text")
async def edit_broadcast_text(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    content_type = data.get('content_type', 'text')
    
    if content_type == "text":
        await callback.message.edit_text(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            "üí° <i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞</i>",
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>",
            parse_mode="HTML"
        )
    
    await state.set_state(BroadcastStates.entering_text)
    await callback.answer()

@router.callback_query(F.data == "broadcast_cancel")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
@router.message(BroadcastStates.entering_text, F.text == "/cancel")
@router.message(BroadcastStates.entering_image, F.text == "/cancel")
async def cancel_broadcast_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()