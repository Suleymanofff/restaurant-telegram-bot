from aiogram import Router, F
from aiogram.types import CallbackQuery
import logging
import json
from src.utils.time_utils import format_restaurant_time
from src.utils.config import settings
from functools import wraps

from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()
logger = logging.getLogger(__name__)

def staff_required_callback(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ callback —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö (–∞–¥–º–∏–Ω—ã + —Å—Ç–∞—Ñ—Ñ)"""
    @wraps(func)
    async def wrapper(callback: CallbackQuery, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º db_manager –∏–∑ kwargs
        db_manager = kwargs.get('db_manager')
        if not db_manager:
            # –ï—Å–ª–∏ db_manager –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            for arg in args:
                if hasattr(arg, 'is_staff'):
                    db_manager = arg
                    break
        
        if db_manager:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not await db_manager.is_staff(callback.from_user.id):
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
                return
        else:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ db_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            if not settings.is_staff(callback.from_user.id):
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
                return
        return await func(callback, *args, **kwargs)
    return wrapper

async def notify_all_staff_call_accepted(bot, staff_name: str, staff_username: str, table_number: int, call_id: int, user_info: str, call_time: str, accepted_by_staff_id: int, original_message_ids: dict, db_manager=None):
    """–£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤, —á—Ç–æ –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã–∑–æ–≤–∞ #{call_id}. –ü—Ä–∏–Ω—è–ª: {staff_name} (ID: {accepted_by_staff_id})")
        logger.info(f"üìã Message IDs –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {original_message_ids}")
        logger.info(f"üîç –¢–∏–ø accepted_by_staff_id: {type(accepted_by_staff_id)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if db_manager:
            try:
                staff_ids = await get_all_staff_users(db_manager)
                logger.info(f"üë• –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –ë–î: {staff_ids}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {e}")
                staff_ids = []
        else:
            staff_ids = []
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢: –¢–µ–ø–µ—Ä—å user_info —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        base_text = (
            f"‚úÖ <b>–í–´–ó–û–í –ü–†–ò–ù–Ø–¢</b>\n"
            f"üë®‚Äçüíº <b>–ü—Ä–∏–Ω—è–ª:</b> {staff_name} (@{staff_username})\n\n"
            f"ü™ë <b>–°—Ç–æ–ª:</b> #{table_number}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_info}\n"  # üî• –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
            f"‚è∞ <b>–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞:</b> {call_time}\n"
            f"üÜî <b>ID –≤—ã–∑–æ–≤–∞:</b> {call_id}\n\n"
            f"<i>–û—Ñ–∏—Ü–∏–∞–Ω—Ç —É–∂–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å—Ç–æ–ª—É</i>"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
        update_count = 0
        for staff_id_str, message_id in original_message_ids.items():
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π staff_id –≤ int –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                staff_id_int = int(staff_id_str)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
                if db_manager and staff_id_int not in staff_ids:
                    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {staff_id_int} –±–æ–ª—å—à–µ –Ω–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è staff_id: {staff_id_str}->{staff_id_int}, message_id: {message_id}")
                logger.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {staff_id_int} == {accepted_by_staff_id} -> {staff_id_int == accepted_by_staff_id}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ - –¥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if staff_id_int == accepted_by_staff_id:
                    logger.info(f"üéØ –≠—Ç–æ –ø—Ä–∏–Ω—è–≤—à–∏–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                    keyboard = InlineKeyboardBuilder()
                    keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–∑–æ–≤", callback_data=f"complete_call_{call_id}")
                    
                    updated_text = base_text + "\n\n<b>–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –ø–æ—Å–ª–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∞</b>"
                    
                    await bot.edit_message_text(
                        chat_id=staff_id_int,
                        message_id=message_id,
                        text=updated_text,
                        reply_markup=keyboard.as_markup(),
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è–≤—à–µ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞")
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
                    logger.info(f"üìù –≠—Ç–æ –¥—Ä—É–≥–æ–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏")
                    await bot.edit_message_text(
                        chat_id=staff_id_int,
                        message_id=message_id,
                        text=base_text,
                        reply_markup=None,
                        parse_mode="HTML"
                    )
                
                update_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è staff {staff_id_str}: {e}")
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {update_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(original_message_ids)}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notify_all_staff_call_accepted: {e}", exc_info=True)

async def get_all_staff_users(db_manager):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        staff_users = await db_manager.get_staff()
        admin_users = await db_manager.get_admins()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_staff = staff_users + admin_users
        staff_ids = list(set([user['user_id'] for user in all_staff]))
        return staff_ids
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {e}")
        return []

@router.callback_query(F.data.startswith("accept_call_"))
@staff_required_callback
async def accept_staff_call(callback: CallbackQuery, db_manager=None, settings=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º - –¢–û–õ–¨–ö–û –ø—Ä–∏–Ω—è—Ç–∏–µ, –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    try:
        call_id = int(callback.data.split("_")[2])
        staff_id = callback.from_user.id
        staff_name = callback.from_user.full_name
        staff_username = callback.from_user.username
        
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞ #{call_id} –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º {staff_name} (ID: {staff_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω—è—Ç –ª–∏ –≤—ã–∑–æ–≤ —É–∂–µ –¥—Ä—É–≥–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º
        call = await db_manager.get_staff_call(call_id)
        if not call:
            logger.error(f"‚ùå –í—ã–∑–æ–≤ #{call_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –í—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –≤—ã–∑–æ–≤–∞ #{call_id}: {call['status']}")
        
        if call['status'] != 'pending':
            logger.warning(f"‚ö†Ô∏è –í—ã–∑–æ–≤ #{call_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {call['status']}")
            await callback.answer("‚ùå –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º", show_alert=True)
            return
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—ã–∑–æ–≤ (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'accepted')
        success = await db_manager.accept_staff_call(call_id, staff_id, staff_name)
        if not success:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ #{call_id} –≤ –ë–î")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", show_alert=True)
            return
        
        logger.info(f"‚úÖ –í—ã–∑–æ–≤ #{call_id} –ø—Ä–∏–Ω—è—Ç –≤ –ë–î")
        
        # –ü–æ–ª—É—á–∞–µ–º message_ids –∏–∑ –ë–î
        message_ids = {}
        if call.get('message_ids'):
            try:
                if isinstance(call['message_ids'], str):
                    message_ids = json.loads(call['message_ids'])
                else:
                    message_ids = call['message_ids']
                
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω—ã message_ids –¥–ª—è –≤—ã–∑–æ–≤–∞ #{call_id}: {message_ids}")
                logger.info(f"üîç –¢–∏–ø—ã –∫–ª—é—á–µ–π: {[type(k) for k in message_ids.keys()]}")
                
            except Exception as e:
                logger.error(f"‚ùå Failed to parse message_ids for call {call_id}: {e}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç message_ids –¥–ª—è –≤—ã–∑–æ–≤–∞ #{call_id}")
        
        
        user_info = await get_client_info_for_call(call, db_manager)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞
        call_time = format_restaurant_time(call['created_at']) if call.get('created_at') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –æ–± –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã–∑–æ–≤–∞
        if message_ids:
            logger.info(f"üîî –ù–∞—á–∏–Ω–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã–∑–æ–≤–∞ #{call_id}")
            await notify_all_staff_call_accepted(
                bot=callback.bot,
                staff_name=staff_name,
                staff_username=staff_username,
                table_number=call['table_number'],
                call_id=call_id,
                user_info=user_info,
                call_time=call_time,
                accepted_by_staff_id=staff_id,
                original_message_ids=message_ids,
                db_manager=db_manager  # –ü–µ—Ä–µ–¥–∞–µ–º db_manager –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ #{call_id}")
        else:
            logger.error(f"‚ùå –ù–µ –º–æ–≥—É —É–≤–µ–¥–æ–º–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ - –Ω–µ—Ç message_ids –¥–ª—è –≤—ã–∑–æ–≤–∞ #{call_id}")
        
        await callback.answer(f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤—ã–∑–æ–≤ —Å—Ç–æ–ª–∞ #{call['table_number']}", show_alert=True)
        logger.info(f"üéØ –í—ã–∑–æ–≤ —Å—Ç–æ–ª–∞ #{call['table_number']} –ø—Ä–∏–Ω—è—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º {staff_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ accept_staff_call: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—ã–∑–æ–≤–∞", show_alert=True)

async def get_client_info_for_call(call: dict, db_manager) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = await db_manager.get_user(call['user_id'])
        
        if user:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_info = user.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
            
            # –î–æ–±–∞–≤–ª—è–µ–º username, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user.get('username'):
                client_info += f" (@{user['username']})"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            demographics = []
            if user.get('sex') and user['sex'] != 'unknown':
                sex_display = {
                    'male': 'üë®',
                    'female': 'üë©', 
                    'other': 'üë§'
                }.get(user['sex'], 'üë§')
                demographics.append(sex_display)
            
            if user.get('major') and user['major'] != 'unknown':
                major_display = {
                    'student': 'üéì',
                    'entrepreneur': 'üíº',
                    'hire': 'üíª', 
                    'frilans': 'üöÄ'
                }.get(user['major'], 'üë§')
                demographics.append(major_display)
            
            if demographics:
                client_info += f" {''.join(demographics)}"
            
            logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {client_info}")
            return client_info
        else:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call['user_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
        return "–ö–ª–∏–µ–Ω—Ç"

@router.callback_query(F.data.startswith("complete_call_"))
@staff_required_callback
async def complete_staff_call(callback: CallbackQuery, db_manager=None):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
    try:
        call_id = int(callback.data.split("_")[2])
        staff_id = callback.from_user.id
        
        logger.info(f"üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ #{call_id} –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º {staff_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç —ç—Ç–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º
        call = await db_manager.get_staff_call(call_id)
        if not call:
            await callback.answer("‚ùå –í—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç —ç—Ç–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º (—É—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö)
        accepted_by = call.get('accepted_by')
        if call['status'] != 'accepted' or accepted_by != staff_id:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—É–∂–æ–≥–æ –≤—ã–∑–æ–≤–∞: accepted_by={accepted_by}, staff_id={staff_id}")
            await callback.answer("‚ùå –í—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤", show_alert=True)
            return

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤
        success = await db_manager.complete_staff_call(call_id)
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
            await callback.message.edit_text(
                f"‚úÖ –í—ã–∑–æ–≤ —Å—Ç–æ–ª–∞ #{call['table_number']} –∑–∞–≤–µ—Ä—à–µ–Ω",
                parse_mode="Markdown"
            )
            await callback.answer("‚úÖ –í—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            logger.info(f"‚úÖ –í—ã–∑–æ–≤ #{call_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–∑–æ–≤", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå Error in complete_staff_call: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–∑–æ–≤–∞", show_alert=True)

@router.callback_query(F.data.startswith("cancel_call_"))
@staff_required_callback
async def cancel_staff_call(callback: CallbackQuery, db_manager = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
    try:
        call_id = int(callback.data.split("_")[2])
        
        success = await db_manager.cancel_staff_call(call_id)
        if success:
            await callback.answer("‚úÖ –í—ã–∑–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå Error in cancel_staff_call: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–∑–æ–≤–∞", show_alert=True)

@router.callback_query(F.data == "refresh_health")
@staff_required_callback
async def refresh_health_check(callback: CallbackQuery, db_manager=None, bot=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        from src.utils.health_monitor import HealthMonitor
        monitor = HealthMonitor(db_manager, bot)
        health_data = await monitor.perform_full_health_check()
        
        status_emoji = {
            "healthy": "‚úÖ",
            "degraded": "‚ö†Ô∏è", 
            "unhealthy": "‚ùå"
        }
        
        text = f"üè• <b>SYSTEM HEALTH MONITOR</b> (Updated)\n\n"
        text += f"üìä <b>Overall Status:</b> {status_emoji[health_data['status'].value]} {health_data['status'].value.upper()}\n"
        text += f"üïê <b>Last Check:</b> {health_data['timestamp'].strftime('%H:%M:%S')}\n\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer("‚úÖ Health check refreshed")
        
    except Exception as e:
        await callback.answer("‚ùå Failed to refresh health check", show_alert=True)