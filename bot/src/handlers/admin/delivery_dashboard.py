from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import logging
import re

from src.database.db_manager import DatabaseManager
from src.utils.config import settings
from fluent.runtime import FluentLocalization

router = Router()
logger = logging.getLogger(__name__)


# helper: —Å—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É caption –±–µ–∑ HTML —Ç–µ–≥–æ–≤ (–¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram ~1024 —Å–∏–º–≤–æ–ª–∞)
def _strip_html_tags(text: str) -> str:
    if not text:
        return ""
    return re.sub(r'<[^>]+>', '', text)

def _caption_too_long(text: str, limit: int = 1024) -> bool:
    # —Å—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É –±–µ–∑ HTML —Ç–µ–≥–æ–≤ (Telegram —Å—á–∏—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –±–µ–∑ —Ç–µ–≥–æ–≤)
    return len(_strip_html_tags(text)) > limit


class DeliveryDashboard:
    def __init__(self, db_manager):
        self.db_manager = db_manager
    
    async def get_dashboard_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏"""
        stats = {
            'today': 0,
            'pending': 0,
            'preparing': 0,
            'on_way': 0,
            'delivered': 0,
            'urgent': 0,
            'total_revenue': 0,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É
            'total_discounts': 0,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å–∫–∏–¥–∫–∏
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_orders = await self.db_manager.get_delivery_orders_today()
            stats['today'] = len(today_orders)
            
            # –°—á–∏—Ç–∞–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ —Å—É–º–º–∞–º
            for order in today_orders:
                status = order['status']
                if status in stats:
                    stats[status] += 1
                
                # –°—á–∏—Ç–∞–µ–º –≤—ã—Ä—É—á–∫—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                if status in ['delivered', 'completed']:
                    stats['total_revenue'] += order.get('final_amount', 0)
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ —Å–∫–∏–¥–∫–∏
                stats['total_discounts'] += order.get('discount_amount', 0)
            
            # –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–º–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç)
            from datetime import datetime, timezone
            now_utc = datetime.now(timezone.utc)
            
            urgent_orders = []
            for order in today_orders:
                if order['status'] in ['pending', 'preparing']:
                    created_at = order['created_at']
                    if created_at.tzinfo is None:
                        created_at = created_at.replace(tzinfo=timezone.utc)
                    
                    time_diff = (now_utc - created_at).total_seconds()
                    if time_diff < 1800:  # 30 –º–∏–Ω—É—Ç
                        urgent_orders.append(order)
            
            stats['urgent'] = len(urgent_orders)
            
        except Exception as e:
            logger.error(f"‚ùå Error getting dashboard stats: {e}")
        
        return stats
    
    async def format_dashboard_message(self, stats, urgent_orders, active_orders):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏"""
        
        message = "üõµ <b>–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–û–°–¢–ê–í–ö–û–ô</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≤—ã—Ä—É—á–∫–æ–π
        message += f"üìä <b>–°–ï–ì–û–î–ù–Ø:</b> {stats['today']} –∑–∞–∫–∞–∑–æ–≤\n"
        message += f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats['pending']} | üë®‚Äçüç≥ –ì–æ—Ç–æ–≤—è—Ç—Å—è: {stats['preparing']} | "
        message += f"üöó –í –ø—É—Ç–∏: {stats['on_way']} | ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: {stats['delivered']}\n"
        
        if stats['total_revenue'] > 0:
            message += f"üí∞ <b>–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {stats['total_revenue']}‚ÇΩ\n"
        
        if stats['total_discounts'] > 0:
            message += f"üéÅ <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–∫–∏–¥–æ–∫:</b> -{stats['total_discounts']}‚ÇΩ\n"
        
        message += "\n"
        
        # –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if urgent_orders:
            message += "üî• <b>–°–†–û–ß–ù–´–ï –ó–ê–ö–ê–ó–´ (–º–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç):</b>\n"
            message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            
            for order in urgent_orders:  # –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                message += await self.format_order_card(order, urgent=True)
                message += "\n"
        else:
            message += "‚úÖ <b>–°—Ä–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç</b>\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã - –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è [:5]
        if active_orders:
            message += "üìã <b>–í–°–ï –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´:</b>\n"
            message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            
            for order in active_orders:  # –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                message += await self.format_order_card(order, urgent=False)
                message += "\n"
        
        return message
    
    async def format_order_card(self, order, urgent=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª—é–¥ –∏ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã"""
        time_ago = self.get_time_ago(order['created_at'])
        phone_masked = self.mask_phone(order.get('customer_phone', '‚Äî'))

        card = ""
        if urgent:
            card += "üÜï "
        else:
            status_emoji = {
                'pending': '‚è≥',
                'preparing': 'üë®‚Äçüç≥',
                'on_way': 'üöó',
                'delivered': '‚úÖ'
            }.get(order.get('status'), 'üì¶')
            card += f"{status_emoji} "

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫: id, –≤—Ä–µ–º—è, –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞
        created_at = order.get('created_at')
        created_time_str = created_at.strftime('%H:%M') if created_at else "‚Äî:‚Äî"
        card += f"<b>#{order.get('id')}</b> | {created_time_str} | "
        card += f"{order.get('customer_name', '‚Äî')} üìû {phone_masked} | {time_ago}\n"

        try:
            # –ü–æ–ª—É—á–∞–µ–º order_data (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É JSON –∏ dict)
            order_data = order.get('order_data', {}) or {}
            if isinstance(order_data, str):
                import json
                try:
                    order_data = json.loads(order_data)
                except Exception:
                    order_data = {}

            items = order_data.get('items', []) if isinstance(order_data, dict) else []

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏: "–ü–∏—Ü—Ü–∞ x2, –°–∞–ª–∞—Ç x1"
            item_lines = []
            for it in items:
                try:
                    name = it.get('name', '‚Äî')
                    qty = it.get('quantity', 1)
                    item_lines.append(f"{name} x{qty}")
                except Exception:
                    continue

            if item_lines:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 2 –ø–æ–∑–∏—Ü–∏–π + "–∏ –µ—â—ë N"
                preview = ", ".join(item_lines[:2])
                if len(item_lines) > 2:
                    preview += f" –∏ –µ—â—ë {len(item_lines) - 2}"
                card += f"   {preview}"
            else:
                card += "   –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

            # –°—É–º–º–∞: —Å—Ç–∞—Ä–∞—è/–Ω–æ–≤–∞—è + –∏–Ω—Ñ–æ –æ —Å–∫–∏–¥–∫–∞—Ö/–±–æ–Ω—É—Å–∞—Ö
            final_amount = order.get('final_amount')
            total_amount = order.get('total_amount', 0) or 0

            if final_amount and final_amount != total_amount:
                card += f" | <s>{int(total_amount)}‚ÇΩ</s> <b>{int(final_amount)}‚ÇΩ</b>"
                discount_info = []
                if order.get('discount_amount', 0) > 0:
                    discount_info.append(f"üéÅ -{int(order['discount_amount'])}‚ÇΩ")
                if order.get('bonus_used', 0) > 0:
                    discount_info.append(f"üíé -{int(order['bonus_used'])}‚ÇΩ")
                if discount_info:
                    card += f" ({' '.join(discount_info)})"
            else:
                amount_to_show = int(final_amount) if final_amount is not None else int(total_amount)
                card += f" | {amount_to_show}‚ÇΩ"

            card += "\n"

            # –ï—Å–ª–∏ —Å—Ä–æ—á–Ω—ã–π ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å
            if urgent:
                addr = order.get('delivery_address', '') or ''
                short_addr = (addr[:30] + '...') if len(addr) > 30 else addr
                card += f"   üè† {short_addr}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–ø–ª–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã
            payment_method = order.get('payment_method') or (order_data.get('payment_method') if isinstance(order_data, dict) else None) or '‚Äî'
            payment_status = order.get('payment_status') or '‚Äî'
            card += f"   üí≥ –û–ø–ª–∞—Ç–∞: {payment_method} ({payment_status})\n"

        except Exception as e:
            logger.error(f"‚ùå Error formatting order items: {e}")
            card += "   –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n"

        return card
    
    def get_time_ago(self, created_at):
        """–í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        from datetime import datetime, timezone
        
        try:
            now = datetime.now(timezone.utc)
            
            if created_at.tzinfo is None:
                created_at = created_at.replace(tzinfo=timezone.utc)
            
            diff = now - created_at
            minutes = int(diff.total_seconds() / 60)
            
            if minutes < 1:
                return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
            elif minutes < 60:
                return f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
            else:
                hours = minutes // 60
                return f"{hours} —á –Ω–∞–∑–∞–¥"
                
        except Exception as e:
            logger.error(f"‚ùå Error in get_time_ago: {e}")
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def mask_phone(self, phone):
        """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        phone_str = str(phone)
        if len(phone_str) >= 6:
            return phone_str[:4] + '***' + phone_str[-2:]
        return phone_str
    
    async def get_dashboard_keyboard(self, orders):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ - –∫–Ω–æ–ø–∫–∏ –¥–ª—è –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã—Ö)
        active_orders = [o for o in orders if o['status'] in ['pending', 'preparing', 'on_way']]
        
        for order in active_orders:  # –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            if order['status'] == 'pending':
                builder.row(
                    InlineKeyboardButton(
                        text=f"üë®‚Äçüç≥ –ù–∞—á–∞—Ç—å #{order['id']}",
                        callback_data=f"dashboard_start_{order['id']}"
                    ),
                    InlineKeyboardButton(
                        text=f"üìû #{order['id']}",
                        callback_data=f"dashboard_call_{order['id']}"
                    )
                )
            elif order['status'] == 'preparing':
                builder.row(
                    InlineKeyboardButton(
                        text=f"üöó –í –ø—É—Ç—å #{order['id']}",
                        callback_data=f"dashboard_ship_{order['id']}"
                    ),
                    InlineKeyboardButton(
                        text=f"üìû #{order['id']}",
                        callback_data=f"dashboard_call_{order['id']}"
                    )
                )
            elif order['status'] == 'on_way':
                builder.row(
                    InlineKeyboardButton(
                        text=f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω #{order['id']}",
                        callback_data=f"dashboard_delivered_{order['id']}"
                    ),
                    InlineKeyboardButton(
                        text=f"üìû #{order['id']}",
                        callback_data=f"dashboard_call_{order['id']}"
                    )
                )
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        builder.row(
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dashboard_refresh"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="dashboard_stats")
        )
        
        return builder.as_markup()

async def refresh_dashboard(message: Message, db_manager: DatabaseManager):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ ‚Äî —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ safe_refresh_dashboard, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."""
    try:
        dashboard = DeliveryDashboard(db_manager)

        stats = await dashboard.get_dashboard_stats()
        all_orders = await db_manager.get_all_delivery_orders()

        urgent_orders = [o for o in all_orders if o['status'] in ['pending', 'preparing']]
        active_orders = [o for o in all_orders if o['status'] in ['pending', 'preparing', 'on_way']]

        text = await dashboard.format_dashboard_message(stats, urgent_orders, active_orders)
        keyboard = await dashboard.get_dashboard_keyboard(active_orders)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_refresh_dashboard ‚Äî –æ–Ω–∞ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        try:
            await safe_refresh_dashboard(bot=message.bot, message=message, new_text=text, new_kb=keyboard)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–æ–ª–ª–±–µ–∫ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            logger.exception(f"refresh_dashboard: safe_refresh_dashboard failed: {e}")
            try:
                await message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            except Exception as edit_error:
                if "message is not modified" not in str(edit_error):
                    logger.exception(f"refresh_dashboard: fallback edit_text also failed: {edit_error}")
    except Exception as e:
        logger.error(f"‚ùå Error refreshing dashboard: {e}")



async def safe_refresh_dashboard(bot: Bot, message: Message, new_text: str, new_kb=None, parse_mode="HTML"):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è, —É—Å—Ç–æ–π—á–∏–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
    - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ñ–æ—Ç–æ/document/media_group -> –ø—ã—Ç–∞–µ–º—Å—è edit_message_caption (–µ—Å–ª–∏ –≤ –ª–∏–º–∏—Ç–µ)
      –∏–Ω–∞—á–µ -> delete + send_message
    - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ -> edit_message_text
    - fallback -> delete + send_message
    """
    chat_id = message.chat.id
    message_id = message.message_id

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ reply_markup (InlineKeyboardBuilder –∏–ª–∏ InlineKeyboardMarkup)
    reply_markup = None
    if new_kb is not None:
        try:
            reply_markup = new_kb.as_markup() if hasattr(new_kb, "as_markup") else new_kb
        except Exception:
            reply_markup = new_kb

    # —Ñ–ª–∞–≥–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    has_photo = bool(getattr(message, "photo", None))
    has_document = getattr(message, "document", None) is not None
    has_media_group = getattr(message, "media_group_id", None) is not None
    has_caption = getattr(message, "caption", None) is not None
    has_text = getattr(message, "text", None) is not None

    logger.debug(f"safe_refresh_dashboard: msg_id={message_id} has_photo={has_photo} has_document={has_document} "
                 f"has_media_group={has_media_group} has_caption={bool(has_caption)} has_text={bool(has_text)}")

    # 1) –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ (photo/document/media_group) ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption
    try:
        if has_photo or has_document or has_media_group:
            # –µ—Å–ª–∏ caption –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî –ø—Ä–æ–±—É–µ–º edit_message_caption
            if not _caption_too_long(new_text, limit=1024):
                try:
                    await bot.edit_message_caption(
                        chat_id=chat_id,
                        message_id=message_id,
                        caption=new_text,
                        parse_mode=parse_mode,
                        reply_markup=reply_markup
                    )
                    logger.debug("safe_refresh_dashboard: used edit_message_caption")
                    return True
                except Exception as e:
                    logger.debug(f"safe_refresh_dashboard: edit_message_caption failed: {e}")

            # –ª–∏–±–æ caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ª–∏–±–æ edit —É–ø–∞–ª -> —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–¥–∏–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.debug(f"safe_refresh_dashboard: failed to delete old media message: {e}")

            await bot.send_message(chat_id=chat_id, text=new_text, parse_mode=parse_mode, reply_markup=reply_markup)
            logger.debug("safe_refresh_dashboard: deleted media and sent text message fallback")
            return True

        # 2) –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º ‚Äî –ø—Ä–æ–±—É–µ–º edit_message_text
        if has_text:
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=new_text,
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                logger.debug("safe_refresh_dashboard: used edit_message_text")
                return True
            except Exception as e:
                # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                if "message is not modified" in str(e):
                    return True
                logger.debug(f"safe_refresh_dashboard: edit_message_text failed: {e}")

        # 3) –§–æ–ª–ª–±–µ–∫: —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logger.debug(f"safe_refresh_dashboard: delete_message fallback failed: {e}")

        await bot.send_message(chat_id=chat_id, text=new_text, parse_mode=parse_mode, reply_markup=reply_markup)
        logger.debug("safe_refresh_dashboard: final fallback sent new text message")
        return True

    except Exception as final_e:
        logger.exception(f"safe_refresh_dashboard: final fallback failed: {final_e}")
        return False

async def show_delivery_stats(message: Message, db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú —Ä–∞—Å—á–µ—Ç–æ–º –≤—ã—Ä—É—á–∫–∏"""
    dashboard = DeliveryDashboard(db_manager)
    
    today_orders = await db_manager.get_delivery_orders_today()
    
    stats_text = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–°–¢–ê–í–ö–ò</b>\n\n"
    
    if today_orders:
        total_orders = len(today_orders)
        completed_orders = len([o for o in today_orders if o['status'] == 'delivered'])
        
        # üî• –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –í–´–†–£–ß–ö–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º final_amount –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        total_revenue = sum(o['final_amount'] for o in today_orders if o['status'] in ['delivered', 'completed'])
        
        # –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–ø–æ final_amount)
        total_amount_all = sum(o['final_amount'] for o in today_orders)
        
        # –°—É–º–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ –∏ –±–æ–Ω—É—Å–æ–≤
        total_discounts = sum(o.get('discount_amount', 0) for o in today_orders)
        total_bonus_used = sum(o.get('bonus_used', 0) for o in today_orders)
        
        stats_text += f"üì¶ <b>–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</b> {total_orders}\n"
        stats_text += f"‚úÖ <b>–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {completed_orders}\n"
        stats_text += f"üí∞ <b>–í—ã—Ä—É—á–∫–∞ (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ):</b> {total_revenue}‚ÇΩ\n"
        stats_text += f"üí≥ <b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤:</b> {total_amount_all}‚ÇΩ\n"
        
        if total_discounts > 0:
            stats_text += f"üéÅ <b>–í—Å–µ–≥–æ —Å–∫–∏–¥–æ–∫:</b> -{total_discounts}‚ÇΩ\n"
        
        if total_bonus_used > 0:
            stats_text += f"üíé <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> -{total_bonus_used}‚ÇΩ\n"
        
        if total_orders > 0:
            conversion_rate = (completed_orders / total_orders) * 100
            stats_text += f"üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b> {conversion_rate:.1f}%\n"
        else:
            stats_text += "üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b> 0%\n"
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for order in today_orders:
            status = order['status']
            status_counts[status] = status_counts.get(status, 0) + 1
            
        stats_text += f"\n<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        for status, count in status_counts.items():
            status_emoji = {
                'pending': '‚è≥',
                'preparing': 'üë®‚Äçüç≥',
                'on_way': 'üöó',
                'delivered': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(status, 'üì¶')
            stats_text += f"{status_emoji} {status}: {count}\n"
            
    else:
        stats_text += "üì≠ –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç\n"
    
    await message.answer(stats_text, parse_mode="HTML")

@router.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–æ–π")
async def delivery_dashboard_admin(message: Message, db_manager: DatabaseManager, l10n: FluentLocalization):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–ª—è –ê–î–ú–ò–ù–û–í"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏")
        return
    
    dashboard = DeliveryDashboard(db_manager)
    
    stats = await dashboard.get_dashboard_stats()
    all_orders = await db_manager.get_all_delivery_orders()
    
    urgent_orders = [o for o in all_orders if o['status'] in ['pending', 'preparing']]
    active_orders = [o for o in all_orders if o['status'] in ['pending', 'preparing', 'on_way']]
    
    text = await dashboard.format_dashboard_message(stats, urgent_orders, active_orders)
    keyboard = await dashboard.get_dashboard_keyboard(active_orders)
    
    await message.answer("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–µ–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏...", reply_markup=ReplyKeyboardRemove())
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data.startswith("dashboard_"))
async def handle_dashboard_actions(callback: CallbackQuery, db_manager: DatabaseManager, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ"""
    action = callback.data.split("_")[1]
    order_id = int(callback.data.split("_")[2]) if len(callback.data.split("_")) > 2 else None
    
    try:
        if action == "start" and order_id:
            success = await db_manager.update_delivery_order_status(order_id, "preparing")
            if success:
                await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É")
                await refresh_dashboard(callback.message, db_manager)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        
        elif action == "ship" and order_id:
            success = await db_manager.update_delivery_order_status(order_id, "on_way")
            if success:
                await callback.answer("üöó –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É")
                await refresh_dashboard(callback.message, db_manager)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        
        elif action == "call" and order_id:
            order = await db_manager.get_delivery_order_by_id(order_id)
            if order:
                await callback.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['customer_phone']}", show_alert=True)
            else:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        elif action == "refresh":
            await refresh_dashboard(callback.message, db_manager)
            await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
        
        elif action == "stats":
            await show_delivery_stats(callback.message, db_manager)
            await callback.answer()
        
        elif action == "delivered" and order_id:
            success = await db_manager.update_delivery_order_status(order_id, "delivered")
            if success:
                await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
                await refresh_dashboard(callback.message, db_manager)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        logger.error(f"‚ùå Dashboard action error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è")


@router.callback_query(F.data.startswith("payment_confirm_"))
async def admin_handle_payment_confirm(callback: CallbackQuery, db_manager: DatabaseManager, bot: Bot):
    """–ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É -> –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É '–í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ'"""
    try:
        admin_id = callback.from_user.id
        admin_ids = [int(a.strip()) for a in settings.ADMIN_IDS.split(",") if a.strip()]
        if admin_id not in admin_ids:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        # –ü–∞—Ä—Å–∏–º order_id
        try:
            order_id = int(callback.data.split("payment_confirm_")[-1])
        except Exception:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.", show_alert=True)
            logger.warning(f"Bad callback data for payment_confirm: {callback.data}")
            return

        # 1) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –≤ –ë–î (–∞—Ç–æ–º–∞—Ä–Ω–æ)
        ok = await db_manager.confirm_payment(order_id, confirmed_by=admin_id)
        if not ok:
            await callback.answer("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞).", show_alert=True)
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            order = await db_manager.get_delivery_order_by_id(order_id)
            if order:
                new_text, new_kb = build_order_dashboard_payload(order)  # —Å–º. —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ
                await safe_refresh_dashboard(bot=callback.bot, message=callback.message, new_text=new_text, new_kb=new_kb)
            return

        # 2) –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        try:
            await db_manager.add_user_action(user_id=admin_id, action_type='payment_confirmed', action_data={'order_id': order_id})
        except Exception:
            logger.debug("add_user_action failed (non-critical)")

        # 3) –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            order = await db_manager.get_delivery_order_by_id(order_id)
            if order and order.get('user_id'):
                await bot.send_message(order['user_id'], f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ ‚Äî –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")
        except Exception as e:
            logger.debug(f"Failed to notify customer about confirmed payment #{order_id}: {e}")

        # 4) –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=False)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        order = await db_manager.get_delivery_order_by_id(order_id)
        if not order:
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî fallback: –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            try:
                await callback.message.edit_reply_markup(None)
            except Exception:
                pass
            return

        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å)
        new_text = (
            f"üÜï <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
            f"üë§ {order.get('customer_name')}\n"
            f"üìû {order.get('customer_phone')}\n"
            f"üè† {order.get('delivery_address')}\n\n"
            f"üí∞ –°—É–º–º–∞: {order.get('final_amount')}‚ÇΩ\n"
            f"üìå –°—Ç–∞—Ç—É—Å: <b>{order.get('status') or 'pending'}</b>\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{order.get('payment_method')} ({order.get('payment_status')})</b>\n\n"
            f"<i>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</i>"
        )

        kb = InlineKeyboardBuilder()
        kb.button(text="üë®‚Äçüç≥ –í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ", callback_data=f"dashboard_start_{order_id}")
        kb.adjust(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        await safe_refresh_dashboard(bot=callback.bot, message=callback.message, new_text=new_text, new_kb=kb)

    except Exception as e:
        logger.exception(f"Error in admin_handle_payment_confirm: {e}")
        try:
            await callback.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, —Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏.", show_alert=True)
        except Exception:
            pass


@router.callback_query(F.data.startswith("payment_reject_"))
async def admin_handle_payment_reject(callback: CallbackQuery, db_manager: DatabaseManager, bot: Bot):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–ª–∞—Ç—É (–∫–Ω–æ–ø–∫–∞ '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É' –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏)."""
    try:
        admin_id = callback.from_user.id
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        admin_ids = [int(a.strip()) for a in settings.ADMIN_IDS.split(",") if a.strip()]
        if admin_id not in admin_ids:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        # –†–∞–∑–±–æ—Ä order_id
        try:
            order_id = int(callback.data.split("payment_reject_")[-1])
        except Exception:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.", show_alert=True)
            logger.warning(f"Bad callback data for payment_reject: {callback.data}")
            return

        # –û—Ç–∫–ª–æ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É (–∞—Ç–æ–º–∞—Ä–Ω–æ) ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç–∞–≤–∏—Ç payment_status = 'rejected'
        ok = await db_manager.reject_payment(order_id, rejected_by=admin_id)
        if not ok:
            await callback.answer("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞).", show_alert=True)
            try:
                order = await db_manager.get_delivery_order_by_id(order_id)
                if order:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    new_text, new_kb = build_order_dashboard_payload(order)
                    await safe_refresh_dashboard(bot=callback.bot, message=callback.message, new_text=new_text, new_kb=new_kb)
            except Exception:
                logger.debug("Failed to refresh dashboard after failed reject (non-critical)")
            return

        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è
        try:
            await db_manager.add_user_action(user_id=admin_id, action_type='payment_rejected', action_data={'order_id': order_id})
        except Exception:
            logger.debug("add_user_action failed (non-critical)")

        # –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        try:
            order = await db_manager.get_delivery_order_by_id(order_id)
            if order and order.get('user_id'):
                await bot.send_message(
                    order['user_id'],
                    f"‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
                )
        except Exception as e:
            logger.debug(f"Failed to notify customer about rejected payment #{order_id}: {e}")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'cancelled' –µ—Å–ª–∏ –æ–Ω –≤—Å—ë –µ—â—ë –≤ 'pending'
        try:
            order = await db_manager.get_delivery_order_by_id(order_id)
            if order:
                current_status = (order.get('status') or '').lower()
                if current_status == 'pending':
                    try:
                        await db_manager.update_delivery_order_status(order_id, "cancelled")
                        logger.info(f"Order #{order_id} status set to 'cancelled' after payment rejected")
                    except Exception as e:
                        logger.exception(f"Failed to set order #{order_id} to 'cancelled': {e}")
                else:
                    logger.info(f"Order #{order_id} not cancelled after payment reject (current status: {current_status})")
        except Exception as e:
            logger.exception(f"Failed to fetch order #{order_id} after reject: {e}")

        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", show_alert=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞).
        try:
            # –ü–æ–¥–≥—Ä—É–∑–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π order –µ—â—ë —Ä–∞–∑ (—á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å)
            order = await db_manager.get_delivery_order_by_id(order_id)
            if order:
                new_text = (
                    f"‚ùå <b>–û–ü–õ–ê–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê</b>\n\n"
                    f"üÜï –ó–∞–∫–∞–∑ #{order_id}\n\n"
                    f"üë§ {order.get('customer_name', '‚Äî')}\n"
                    f"üìû {order.get('customer_phone', '‚Äî')}\n"
                    f"üè† {order.get('delivery_address', '‚Äî')}\n\n"
                    f"üí∞ –°—É–º–º–∞: {order.get('final_amount') or order.get('total_amount', 0)}‚ÇΩ\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: <b>{order.get('status') or '‚Äî'}</b>\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{order.get('payment_method') or '‚Äî'} (rejected)</b>\n\n"
                    f"<i>–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–ª–∞—Ç—É. –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</i>"
                )

                from aiogram.utils.keyboard import InlineKeyboardBuilder
                kb = InlineKeyboardBuilder()
                kb.button(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å", callback_data="dashboard_refresh")
                kb.adjust(1)

                await safe_refresh_dashboard(
                    bot=callback.bot,
                    message=callback.message,
                    new_text=new_text,
                    new_kb=kb
                )
            else:
                # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ order –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —É–±–µ—Ä—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∂–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    await callback.message.edit_reply_markup(None)
                except Exception:
                    logger.debug("Could not clear reply_markup on callback.message")
        except Exception as e:
            logger.exception(f"Failed to refresh admin message after rejecting payment #{order_id}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—á—Ç–æ–±—ã –∑–∞–∫–∞–∑ –∏—Å—á–µ–∑/–æ–±–Ω–æ–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö)
        try:
            await refresh_dashboard(callback.message, db_manager)
        except Exception as e:
            logger.debug(f"Failed to refresh main dashboard after payment reject: {e}")

    except Exception as e:
        logger.exception(f"Error in admin_handle_payment_reject: {e}")
        try:
            await callback.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, —Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏.", show_alert=True)
        except Exception:
            pass



def build_order_dashboard_payload(order: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text, inline_kb) –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ order dict.
    –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ payment_status.
    """
    order_id = order.get('id')
    customer = order.get('customer_name') or '‚Äî'
    phone = order.get('customer_phone') or '‚Äî'
    addr = order.get('delivery_address') or '‚Äî'
    total = order.get('final_amount') or order.get('total_amount') or 0
    status = order.get('status') or 'pending'
    payment_method = order.get('payment_method') or order.get('order_data', {}).get('payment_method')
    payment_status = order.get('payment_status') or 'pending'

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    items_text = ""
    try:
        items = order.get('order_data', {}).get('items', [])
        if items:
            items_text = "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
            for it in items:
                name = it.get('name', '‚Äî')
                qty = it.get('quantity', 1)
                price = it.get('price', 0)
                line_sum = (float(price) * int(qty)) if price is not None else 0
                items_text += f"‚Ä¢ {name} x{qty} ‚Äî {int(line_sum)}‚ÇΩ\n"
            items_text += "\n"
    except Exception:
        items_text = ""

    text = (
        f"üÜï <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"üë§ {customer}\n"
        f"üìû {phone}\n"
        f"üè† {addr}\n\n"
        f"üí∞ –°—É–º–º–∞: {total}‚ÇΩ\n"
        f"üìå –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{payment_method} ({payment_status})</b>\n\n"
        f"{items_text}"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardBuilder()
    # Payment buttons: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if str(payment_status).lower() == 'pending' and str(payment_method) in ('card', 'bank_transfer'):
        kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"payment_confirm_{order_id}")
        kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"payment_reject_{order_id}")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
    kb.button(text="üë®‚Äçüç≥ –í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ", callback_data=f"dashboard_start_{order_id}")
    kb.button(text="üöó –ü–µ—Ä–µ–¥–∞—Ç—å –∫—É—Ä—å–µ—Ä—É", callback_data=f"dashboard_ship_{order_id}")
    kb.button(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"dashboard_delivered_{order_id}")
    kb.button(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"dashboard_call_{order_id}")
    kb.adjust(2)

    return text, kb



@router.callback_query(F.data.startswith("dashboard_start_"))
async def start_preparing_order(callback: CallbackQuery, db_manager: DatabaseManager):
    """–ù–∞—á–∞—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Ç–µ–ø–µ—Ä—å —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π)."""
    try:
        order_id = int(callback.data.split("_")[2])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        success = await db_manager.update_delivery_order_status(order_id, "preparing")
        if success:
            await callback.answer("üë®‚Äçüç≥ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ")

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = await db_manager.get_delivery_order_by_id(order_id)
            if order:
                dashboard = DeliveryDashboard(db_manager)
                updated_text = await dashboard.format_order_card(order, urgent=False)
                updated_text = f"üë®‚Äçüç≥ <b>–í –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ò</b>\n\n{updated_text}"

                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üöó –í –ø—É—Ç—å", callback_data=f"dashboard_ship_{order_id}")
                keyboard.button(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"dashboard_call_{order_id}")
                keyboard.adjust(2)

                # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    await safe_refresh_dashboard(
                        bot=callback.bot,
                        message=callback.message,
                        new_text=updated_text,
                        new_kb=keyboard
                    )
                except Exception as e:
                    logger.exception(f"Failed to refresh admin message on start_preparing_order: {e}")
                    # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                    try:
                        await callback.message.answer(updated_text, parse_mode="HTML", reply_markup=keyboard.as_markup())
                    except Exception as send_e:
                        logger.debug(f"Fallback send failed: {send_e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥
            await refresh_dashboard(callback.message, db_manager)

        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

    except Exception as e:
        logger.error(f"‚ùå Error starting order preparation: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")


@router.callback_query(F.data.startswith("dashboard_ship_"))
async def ship_order(callback: CallbackQuery, db_manager: DatabaseManager):
    """–ü–µ—Ä–µ–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É"""
    try:
        order_id = int(callback.data.split("_")[2])
        
        success = await db_manager.update_delivery_order_status(order_id, "on_way")
        if success:
            await callback.answer("üöó –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            order = await db_manager.get_delivery_order_by_id(order_id)
            if order:
                dashboard = DeliveryDashboard(db_manager)
                updated_text = await dashboard.format_order_card(order, urgent=False)
                updated_text = f"üöó <b>–í –ü–£–¢–ò</b>\n\n{updated_text}"
                
                from aiogram.utils.keyboard import InlineKeyboardBuilder
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"dashboard_delivered_{order_id}")
                keyboard.button(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"dashboard_call_{order_id}")
                
                # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    await safe_refresh_dashboard(
                        bot=callback.bot,
                        message=callback.message,
                        new_text=updated_text,
                        new_kb=keyboard
                    )
                except Exception as e:
                    logger.exception(f"Failed to refresh admin message on ship_order: {e}")
                    # fallback: –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                    try:
                        await callback.message.edit_text(updated_text, parse_mode="HTML", reply_markup=keyboard.as_markup())
                    except Exception as edit_error:
                        if "message is not modified" not in str(edit_error):
                            logger.exception(f"ship_order: fallback edit_text failed: {edit_error}")
            
            await refresh_dashboard(callback.message, db_manager)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        logger.error(f"‚ùå Error shipping order: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data.startswith("dashboard_delivered_"))
async def mark_order_delivered(callback: CallbackQuery, db_manager: DatabaseManager):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        order_id = int(callback.data.split("_")[2])
        
        # –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = await db_manager.get_delivery_order_by_id(order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id = order['user_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ
        if order['status'] == 'delivered':
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            return
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        success = await db_manager.update_delivery_order_status(order_id, "delivered")
        
        if success:
            # –ü–†–û–í–ï–†–Ø–ï–ú –∏ –ù–ê–ß–ò–°–õ–Ø–ï–ú —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            user = await db_manager.get_user(user_id)
            if user and user.get('referrer_id'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –î–û–°–¢–ê–í–õ–ï–ù–ù–´–ô –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_orders = await db_manager.get_delivery_orders_by_user(user_id)
                delivered_orders = [o for o in user_orders if o['status'] == 'delivered']
                
                if len(delivered_orders) == 1:  # –≠—Ç–æ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
                    bonus_success = await db_manager.complete_referral_bonus(user_id, order_id)
                    if bonus_success:
                        logger.info(f"‚úÖ Referral bonus awarded for order {order_id}, user {user_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Failed to award referral bonus for order {order_id}")
            
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            await refresh_dashboard(callback.message, db_manager)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        logger.error(f"‚ùå Error marking order delivered: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data.startswith("dashboard_call_"))
async def show_customer_phone(callback: CallbackQuery, db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        
        order = await db_manager.get_delivery_order_by_id(order_id)
        if order:
            await callback.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{order['customer_phone']}", show_alert=True)
        else:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå Error getting customer phone: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")