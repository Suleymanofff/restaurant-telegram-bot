# from aiogram import Router, F, Bot
# from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, ReplyKeyboardRemove
# from aiogram.utils.keyboard import InlineKeyboardBuilder
# from fluent.runtime import FluentLocalization
# import logging
# import json

# from src.handlers.admin.delivery_dashboard import DeliveryDashboard
# from src.database.db_manager import DatabaseManager
# from src.utils.config import settings

# router = Router()
# logger = logging.getLogger(__name__)

# @router.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–æ–π__")
# async def show_delivery_orders_menu(message: Message, db_manager: DatabaseManager, l10n: FluentLocalization):
#     """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ê–î–ú–ò–ù–û–í"""
#     if not settings.is_admin(message.from_user.id):
#         await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏")
#         return
    
#     builder = InlineKeyboardBuilder()
#     builder.row(
#         InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="admin_pending_delivery"),
#         InlineKeyboardButton(text="üë®‚Äçüç≥ –í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏", callback_data="admin_preparing_delivery")
#     )
#     builder.row(
#         InlineKeyboardButton(text="üöó –í –ø—É—Ç–∏", callback_data="admin_onway_delivery"),
#         InlineKeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ", callback_data="admin_delivered_delivery")
#     )
    
#     await message.answer(
#         "üì¶ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:",
#         reply_markup=builder.as_markup()
#     )

# @router.callback_query(F.data.startswith("admin_"))
# async def show_delivery_orders(callback: CallbackQuery, db_manager: DatabaseManager, l10n: FluentLocalization):
#     """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
#     status_map = {
#         "admin_pending_delivery": "pending",
#         "admin_preparing_delivery": "preparing", 
#         "admin_onway_delivery": "on_way",
#         "admin_delivered_delivery": "delivered"
#     }
    
#     status = status_map.get(callback.data)
#     if not status:
#         await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
#         return
    
#     orders = await db_manager.get_delivery_orders_by_status(status)
    
#     if not orders:
#         await callback.message.edit_text(f"üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
#         return
    
#     for order in orders[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞
#         order_text = format_delivery_order_text(order)
        
#         builder = InlineKeyboardBuilder()
#         if status == "pending":
#             builder.row(
#                 InlineKeyboardButton(text="üë®‚Äçüç≥ –í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ", callback_data=f"delivery_preparing_{order['id']}"),
#             )
#         elif status == "preparing":
#             builder.row(
#                 InlineKeyboardButton(text="üöó –í –ø—É—Ç—å", callback_data=f"delivery_onway_{order['id']}"),
#             )
#         elif status == "on_way":
#             builder.row(
#                 InlineKeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"delivery_delivered_{order['id']}"),
#             )
        
#         await callback.message.answer(order_text, reply_markup=builder.as_markup())
    
#     await callback.answer()

# @router.callback_query(F.data.startswith("delivery_"))
# async def update_delivery_order_status(callback: CallbackQuery, db_manager: DatabaseManager, l10n: FluentLocalization, bot: Bot):
#     """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
#     try:
#         action, order_id = callback.data.split("_")[1], int(callback.data.split("_")[2])
        
#         status_map = {
#             "preparing": "preparing",
#             "onway": "on_way", 
#             "delivered": "delivered"
#         }
        
#         new_status = status_map.get(action)
#         if not new_status:
#             await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
#             return
        
#         success = await db_manager.update_delivery_order_status(order_id, new_status)
        
#         if success:
#             # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
#             orders = await db_manager.get_delivery_orders_by_status(new_status)
#             updated_order = next((o for o in orders if o['id'] == order_id), None)
            
#             if updated_order:
#                 # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#                 await notify_user_about_delivery_status(bot, updated_order)
                
#                 # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
#                 updated_text = format_delivery_order_text(updated_order)
#                 await callback.message.edit_text(
#                     updated_text,
#                     reply_markup=None
#                 )
                
#             await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_status}")
#         else:
#             await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        
#     except Exception as e:
#         logger.error(f"‚ùå Error updating delivery order: {e}")
#         await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

# def format_delivery_order_text(order: dict) -> str:
#     """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º order_data –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
#     try:
#         if isinstance(order['order_data'], str):
#             order_data = json.loads(order['order_data'])
#         else:
#             order_data = order['order_data']
#     except (json.JSONDecodeError, KeyError, TypeError):
#         order_data = {}
    
#     text = f"üõµ <b>–ó–ê–ö–ê–ó –î–û–°–¢–ê–í–ö–ò #{order['id']}</b>\n\n"
    
#     text += "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
#     items = order_data.get('items', [])
    
#     if not items:
#         text += "‚Ä¢ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω\n"
#     else:
#         for item in items:
#             text += f"‚Ä¢ {item.get('name', 'Unknown')} x{item.get('quantity', 1)}\n"
    
#     text += f"\nüí∞ <b>–°—É–º–º–∞: {order['total_amount']}‚ÇΩ</b>\n\n"
    
#     text += "<b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n"
#     text += f"üë§ –ò–º—è: {order['customer_name']}\n"
#     text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['customer_phone']}\n"
#     text += f"üè† –ê–¥—Ä–µ—Å: {order['delivery_address']}\n"
#     text += f"üïê –í—Ä–µ–º—è: {order.get('delivery_time', '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')}\n\n"
    
#     text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {order['status']}\n"
#     text += f"‚è∞ –°–æ–∑–¥–∞–Ω: {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
    
#     return text

# async def notify_user_about_delivery_status(bot: Bot, order: dict):
#     """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
#     try:
#         status_messages = {
#             "preparing": "üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å!",
#             "on_way": "üöó –í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏! –ö—É—Ä—å–µ—Ä —É–∂–µ –µ–¥–µ—Ç –∫ –≤–∞–º.",
#             "delivered": "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!"
#         }
        
#         message = status_messages.get(order['status'])
#         if message and order['user_id']:
#             await bot.send_message(
#                 order['user_id'],
#                 f"{message}\n\n–ó–∞–∫–∞–∑ #{order['id']}"
#             )
#     except Exception as e:
#         logger.error(f"‚ùå Failed to notify user about delivery status: {e}")