from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import StateFilter
from fluent.runtime import FluentLocalization
from functools import wraps

from src.utils.config import settings
import src.handlers.admin.keyboards as kb
from src.utils.logger import get_logger

router = Router()
logger = get_logger(__name__)


def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–¢–û–õ–¨–ö–û –∞–¥–º–∏–Ω—ã) —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        db_manager = kwargs.get('db_manager')
        if not db_manager:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.ensure_user_exists(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        
        if not await db_manager.is_admin(message.from_user.id):
            await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        return await func(message, *args, **kwargs)
    return wrapper

def staff_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–∞–¥–º–∏–Ω—ã –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª) —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        db_manager = kwargs.get('db_manager')
        if not db_manager:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.ensure_user_exists(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        
        if not await db_manager.is_staff(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        return await func(message, *args, **kwargs)
    return wrapper

@router.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
@admin_required
async def analytics_menu(message: Message, l10n: FluentLocalization, db_manager = None):
    if not db_manager:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    keyboard = await kb.get_analytics_keyboard(l10n)
    await message.answer("üìä <b>–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", 
                        reply_markup=keyboard, parse_mode="HTML")

@router.message(F.text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@admin_required
async def general_stats(message: Message, db_manager = None):
    if not db_manager:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    stats = await db_manager.get_general_stats()
    
    text = f"""
üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('new_users_today', 0)}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats.get('new_users_week', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (30 –¥–Ω.): {stats.get('active_users', 0)}

üìã <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_reservations', 0)}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('reservations_today', 0)}

üë®‚Äçüíº <b>–í—ã–∑–æ–≤—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_staff_calls', 0)}
    """
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üë• –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
@admin_required
async def user_analytics(message: Message, db_manager = None):
    if not db_manager:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    demographics = await db_manager.get_user_demographics()
    growth = await db_manager.get_user_growth(7)
    
    text = "üë• <b>–î–ï–ú–û–ì–†–ê–§–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
    
    for row in demographics:
        sex_emoji = "üë®" if row['sex'] == 'male' else "üë©" if row['sex'] == 'female' else "‚ùì"
        major_text = {
            'student': 'üéì –°—Ç—É–¥–µ–Ω—Ç',
            'entrepreneur': 'üí∞ –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', 
            'hire': 'üíº –†–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–∞–π–º–µ',
            'frilans': 'üíª –§—Ä–∏–ª–∞–Ω—Å–µ—Ä'
        }.get(row['major'], row['major'])
        
        text += f"{sex_emoji} {major_text}: {row['count']} ({row['percentage']}%)\n"
    
    if growth:
        week_growth = growth[-1]['total_users'] - growth[0]['total_users']
        text += f"\nüìà –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: +{week_growth} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üéØ –¶–µ–ª–µ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
@admin_required
async def target_segments(message: Message, db_manager = None):
    if not db_manager:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    segments = await db_manager.get_target_segments()
    
    text = f"""
üéØ <b>–¶–ï–õ–ï–í–´–ï –°–ï–ì–ú–ï–ù–¢–´ –î–õ–Ø –†–ê–°–°–´–õ–û–ö</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>
üë® –ú—É–∂—á–∏–Ω—ã: {segments.get('male_count', 0)}
üë© –ñ–µ–Ω—â–∏–Ω—ã: {segments.get('female_count', 0)}

üéì –°—Ç—É–¥–µ–Ω—Ç—ã: {segments.get('students_count', 0)}
üí∞ –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏: {segments.get('entrepreneurs_count', 0)}  
üíª –§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã: {segments.get('freelancers_count', 0)}
üíº –†–∞–±–æ—Ç–∞—é—â–∏–µ –ø–æ –Ω–∞–π–º—É: {segments.get('employees_count', 0)}

<b>–¶–µ–ª–µ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:</b>
üë®üí∞ –ú—É–∂—á–∏–Ω—ã-–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏: {segments.get('male_entrepreneurs', 0)}
üë©üéì –ñ–µ–Ω—â–∏–Ω—ã-—Å—Ç—É–¥–µ–Ω—Ç–∫–∏: {segments.get('female_students', 0)}
üë®üíª –ú—É–∂—á–∏–Ω—ã-—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã: {segments.get('male_freelancers', 0)}
    """
    
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
@admin_required
async def reservation_analytics(message: Message, db_manager = None):
    if not db_manager:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    stats = await db_manager.get_reservation_stats()
    trends = await db_manager.get_reservation_trends(7)
    
    avg_guests = stats.get('avg_guests') or 0
    
    day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    
    text = f"""
üìã <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {stats.get('total_reservations', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≥–æ—Å—Ç–µ–π: {avg_guests:.1f}
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≥–æ—Å—Ç–µ–π: {stats.get('max_guests', 0)}

<b>–°—Ç–∞—Ç—É—Å—ã:</b>
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ: {stats.get('confirmed', 0)}
‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {stats.get('pending', 0)}  
‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {stats.get('cancelled', 0)}
üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {stats.get('completed', 0)}

<b>–°–µ–≥–æ–¥–Ω—è:</b> {stats.get('today_reservations', 0)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –¥–µ–Ω—å:</b> {day_names[int(stats.get('most_popular_day', 0))] if stats.get('most_popular_day') else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
    """
    
    if trends:
        today_trend = trends[0]['reservations_count'] if trends else 0
        text += f"\nüìà <b>–¢—Ä–µ–Ω–¥:</b> {today_trend} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è"
    
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üë®‚Äçüíº –í—ã–∑–æ–≤—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞")
@admin_required
async def staff_calls_analytics(message: Message, db_manager = None):
    if not db_manager:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    stats = await db_manager.get_staff_calls_stats()
    menu_views = await db_manager.get_popular_menu_categories()
    
    avg_time = stats.get('avg_completion_time_min') or 0
    
    text = f"""
üë®‚Äçüíº <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –í–´–ó–û–í–û–í –ü–ï–†–°–û–ù–ê–õ–ê</b>

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤:</b>
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: {stats.get('total_calls', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats.get('pending_calls', 0)}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats.get('accepted_calls', 0)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed_calls', 0)}

<b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f} –º–∏–Ω.
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª: #{stats.get('most_active_table', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
‚Ä¢ –í—ã–∑–æ–≤—ã —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_calls', 0)}
    """
    
    if menu_views:
        text += "\n\n<b>üìä –ü–û–ü–£–õ–Ø–†–ù–û–°–¢–¨ –ú–ï–ù–Æ:</b>\n"
        for i, item in enumerate(menu_views[:5], 1):
            text += f"{i}. {item['category']}: {item['total_views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
    
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
@admin_required
async def daily_activity(message: Message, db_manager = None):
    if not db_manager:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    activity = await db_manager.get_daily_activity(7)
    
    if not activity:
        await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
        return
    
    text = "üìà <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú (–Ω–µ–¥–µ–ª—è)</b>\n\n"
    
    current_date = None
    for row in activity:
        if row['date'] != current_date:
            text += f"\nüìÖ <b>{row['date']}</b>\n"
            current_date = row['date']
        
        action_name = {
            'menu_view': 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é',
            'reservation': 'üí∫ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'staff_call': 'üë®‚Äçüíº –í—ã–∑–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞',
            'start': 'üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞',
            'main_menu_view': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            'menu_open': 'üìÉ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é',
            'menu_category_view': 'üçΩÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            'staff_call_start': 'üë®‚Äçüíº –ù–∞—á–∞–ª–æ –≤—ã–∑–æ–≤–∞',
            'staff_call_confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞',
            'reservation_start': 'üí∫ –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'delivery_click': 'üõµ –ö–ª–∏–∫ –¥–æ—Å—Ç–∞–≤–∫–∏',
            'invite_friend_click': 'üë• –ö–ª–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
            'loyalty_program_click': 'üí≥ –ö–ª–∏–∫ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
            'get_directions_click': 'üó∫Ô∏è –ö–ª–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞',
            'help_command': '‚ùì –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏',
            'unknown_message': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        }.get(row['action_type'], row['action_type'])
        
        text += f"   {action_name}: {row['actions_count']} ({row['unique_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"
    
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, l10n: FluentLocalization, db_manager = None):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from src.handlers.user.message import show_main_menu
    await show_main_menu(message, l10n, db_manager)


@router.message(F.text == "üìã –ë—Ä–æ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è")
@admin_required
async def today_reservations_report(message: Message, db_manager=None, bot=None):
    """–û—Ç—á–µ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if not db_manager:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        processing_msg = await message.answer("üìä –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º...")
        
        today = datetime.now().strftime("%d.%m.%Y")
        reservations = await db_manager.get_reservations_for_date(today)
        
        if not reservations:
            await processing_msg.edit_text("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç")
            return
        
        reservations_dict = [dict(reservation) for reservation in reservations]
        
        # üî• –¢–ï–ö–°–¢–û–í–ê–Ø –°–í–û–î–ö–ê –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ü–†–û–°–ú–û–¢–†–ê
        status_emojis = {
            'pending': '‚è≥',
            'confirmed': '‚úÖ', 
            'cancelled': '‚ùå',
            'completed': 'üéâ'
        }
        
        status_counts = {}
        total_guests = 0
        
        for reservation in reservations_dict:
            status = reservation['status']
            status_counts[status] = status_counts.get(status, 0) + 1
            total_guests += reservation['guests_count']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É
        summary_text = f"üìã <b>–ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –ù–ê –°–ï–ì–û–î–ù–Ø ({today})</b>\n\n"
        summary_text += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        summary_text += f"‚Ä¢ –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(reservations)}\n"
        summary_text += f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {total_guests}\n\n"
        
        summary_text += f"üìà <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        for status, count in status_counts.items():
            emoji = status_emojis.get(status, 'üìù')
            status_name = {
                'pending': '–û–∂–∏–¥–∞–Ω–∏–µ',
                'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ', 
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
            }.get(status, status)
            summary_text += f"‚Ä¢ {emoji} {status_name}: {count}\n"
        
        # –ë–ª–∏–∂–∞–π—à–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 5)
        upcoming = sorted(
            [r for r in reservations_dict if r['status'] in ['pending', 'confirmed']],
            key=lambda x: x['reservation_time']
        )[:5]
        
        if upcoming:
            summary_text += f"\nüïê <b>–ë–ª–∏–∂–∞–π—à–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
            for i, reservation in enumerate(upcoming, 1):
                time_str = reservation['reservation_time'].strftime("%H:%M") if hasattr(reservation['reservation_time'], 'strftime') else str(reservation['reservation_time'])
                summary_text += f"{i}. {time_str} - {reservation['customer_name']} ({reservation['guests_count']} —á–µ–ª.)\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É
        await message.answer(summary_text, parse_mode="HTML")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        from src.utils.report_generator import ReportGenerator
        report_gen = ReportGenerator()
        
        file_path = await report_gen.generate_daily_reservations_report(reservations_dict)
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –§–ê–ô–õ–ê
        try:
            # –°–æ–∑–¥–∞–µ–º InputFile —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            input_file = FSInputFile(
                path=file_path,
                filename=f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è_{datetime.now().strftime('%d.%m.%Y')}.xlsx"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await bot.send_document(
                chat_id=message.chat.id,
                document=input_file,
                caption="üìé <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Excel</b>\n\n"
                       "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–∞–π–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</i>",
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ Sent reservations report to admin {message.from_user.id}")
            
        except Exception as file_error:
            logger.error(f"‚ùå Failed to send document: {file_error}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
            raise file_error
        finally:
            # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            report_gen.cleanup_file(file_path)
        
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"‚ùå Failed to generate reservations report: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")


@router.message(F.text == "üè• Health Monitor")
@admin_required
async def health_monitor(message: Message, db_manager=None, bot=None):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    if not db_manager or not bot:
        await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        from src.utils.health_monitor import HealthMonitor
        monitor = HealthMonitor(db_manager, bot)
        health_data = await monitor.perform_full_health_check()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_emoji = {
            "healthy": "‚úÖ",
            "degraded": "‚ö†Ô∏è", 
            "unhealthy": "‚ùå"
        }
        
        text = f"üè• <b>SYSTEM HEALTH MONITOR</b>\n\n"
        text += f"üìä <b>Overall Status:</b> {status_emoji[health_data['status'].value]} {health_data['status'].value.upper()}\n"
        text += f"üïê <b>Last Check:</b> {health_data['timestamp'].strftime('%H:%M:%S')}\n\n"
        
        # –°–≤–æ–¥–∫–∞
        summary = health_data['summary']
        text += f"<b>Summary:</b>\n"
        text += f"‚Ä¢ ‚úÖ Healthy: {summary['healthy_checks']}/{summary['total_checks']}\n"
        text += f"‚Ä¢ ‚ö†Ô∏è Degraded: {summary['degraded_checks']}\n"
        text += f"‚Ä¢ ‚ùå Unhealthy: {summary['unhealthy_checks']}\n"
        text += f"‚Ä¢ üìà Success Rate: {summary['success_rate']:.1f}%\n"
        text += f"‚Ä¢ ‚è±Ô∏è Avg Response: {summary['avg_response_time']:.3f}s\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
        text += "<b>Detailed Checks:</b>\n"
        for check in health_data['checks']:
            emoji = status_emoji.get(check['status'], '‚ùì')
            response_time = f"{check['response_time']:.3f}s" if check['response_time'] > 0 else "N/A"
            text += f"{emoji} <b>{check['component']}</b> ({response_time}): {check['message']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ Refresh", callback_data="refresh_health")
        
        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Health monitor error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")