from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.db_manager import DatabaseManager
from src.utils.config import settings
from fluent.runtime import FluentLocalization
from src.handlers.user.reservation import notify_user_about_reservation_status
from datetime import date, datetime, time
from src.utils.time_utils import format_restaurant_time, parse_reservation_datetime
from src.utils.logger import get_logger

router = Router()
logger = get_logger(__name__)

@router.message(Command("reservations"))
@router.message(F.text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω—è–º–∏")
async def show_reservations_menu(message: Message, db_manager: DatabaseManager, l10n: FluentLocalization):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω—è–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω—è–º–∏.")
        return
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="admin_pending_reservations"),
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="admin_confirmed_reservations")
    )
    builder.row(
        InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="admin_today_reservations"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_reservations_stats")
    )
    
    await message.answer(
        "üìã –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω—è–º–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "admin_pending_reservations")
async def show_pending_reservations(callback: CallbackQuery, db_manager: DatabaseManager, l10n: FluentLocalization):
    """–ü–æ–∫–∞–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–µ–π"""
    reservations = await db_manager.get_reservations_by_status("pending")
    
    if not reservations:
        await callback.message.edit_text("‚è≥ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–µ–π.")
        return
    
    for reservation in reservations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        reservation_text = format_reservation_text(reservation, "–û–ñ–ò–î–ê–ï–¢ - ")
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{reservation['id']}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{reservation['id']}")
        )
        
        await callback.message.answer(reservation_text, reply_markup=builder.as_markup())
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin_confirm_"))
async def confirm_reservation_admin(callback: CallbackQuery, db_manager: DatabaseManager, l10n: FluentLocalization, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        reservation_id = int(callback.data.split("_")[2])
        logger.info(f"üîÑ Admin confirming reservation #{reservation_id}")
        
        success = await db_manager.update_reservation_status(reservation_id, "confirmed")
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
            reservation = await db_manager.get_reservation_by_id(reservation_id)
            if reservation:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–ï–†–ï–î–ê–ï–ú –û–ë–™–ï–ö–¢–´, –ê –ù–ï –°–¢–†–û–ö–ò
                await notify_user_about_reservation_status(
                    bot, reservation['user_id'], 
                    {
                        'id': reservation_id,
                        'date': reservation['reservation_date'],  # –æ–±—ä–µ–∫—Ç date
                        'time': reservation['reservation_time'],  # –æ–±—ä–µ–∫—Ç time
                        'guests': reservation['guests_count'],
                        'name': reservation['customer_name'],
                        'phone': reservation['customer_phone'],
                        'status': '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
                    },
                    l10n
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                updated_text = format_reservation_text(reservation, "–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê - ")
                
                await callback.message.edit_text(
                    updated_text,
                    reply_markup=None
                )
                logger.info(f"‚úÖ Reservation #{reservation_id} confirmed by admin")
            else:
                await callback.message.edit_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏")
            logger.error(f"‚ùå Failed to confirm reservation #{reservation_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in confirm_reservation_admin: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏")
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin_reject_"))
async def reject_reservation_admin(callback: CallbackQuery, db_manager: DatabaseManager, l10n: FluentLocalization, bot: Bot):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        reservation_id = int(callback.data.split("_")[2])
        print(f"üîÑ Admin rejecting reservation #{reservation_id}")
        
        success = await db_manager.update_reservation_status(reservation_id, "cancelled")
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
            reservation = await db_manager.get_reservation_by_id(reservation_id)
            if reservation:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await notify_user_about_reservation_status(
                    bot, reservation['user_id'], 
                    {
                        'id': reservation_id,
                        'date': str(reservation['reservation_date']),
                        'time': str(reservation['reservation_time']),
                        'guests': reservation['guests_count'],
                        'name': str(reservation['customer_name']),
                        'phone': str(reservation['customer_phone']),
                        'status': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
                    },
                    l10n
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                updated_text = format_reservation_text(reservation, "–û–¢–ö–õ–û–ù–ï–ù–ê - ")
                
                await callback.message.edit_text(
                    updated_text,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                )
                print(f"‚úÖ Reservation #{reservation_id} rejected by admin")
            else:
                await callback.message.edit_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏")
            print(f"‚ùå Failed to reject reservation #{reservation_id}")
        
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏")
        print(f"‚ùå Error in reject_reservation_admin: {e}")
    
    await callback.answer()


def format_reservation_text(reservation: dict, status_prefix: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –±—Ä–æ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        reservation_datetime = parse_reservation_datetime(
            reservation['reservation_date'],
            reservation['reservation_time']
        )
        
        if reservation_datetime:
            formatted_time = format_restaurant_time(reservation_datetime)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if isinstance(reservation['reservation_date'], (datetime, date)):
                formatted_date = reservation['reservation_date'].strftime("%d.%m.%Y")
            else:
                try:
                    if '-' in str(reservation['reservation_date']):
                        year, month, day = map(int, str(reservation['reservation_date']).split('-'))
                        formatted_date = f"{day:02d}.{month:02d}.{year}"
                    else:
                        formatted_date = str(reservation['reservation_date'])
                except:
                    formatted_date = str(reservation['reservation_date'])
        else:
            # Fallback
            formatted_time = str(reservation['reservation_time'])
            formatted_date = str(reservation['reservation_date'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏
        created_at = reservation['created_at']
        formatted_created_at = format_restaurant_time(created_at)
        
    except Exception as e:
        logger.error(f"‚ùå Error formatting reservation text: {e}")
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
        formatted_date = str(reservation.get('reservation_date', 'N/A'))
        formatted_time = str(reservation.get('reservation_time', 'N/A'))
        formatted_created_at = str(reservation.get('created_at', 'N/A'))
    
    status_emoji = {
        'confirmed': '‚úÖ',
        'cancelled': '‚ùå',
        'pending': '‚è≥',
        'completed': 'üéâ'
    }.get(reservation.get('status', 'pending'), 'üìã')
    
    base_text = f"""
{status_emoji} {status_prefix}–ë—Ä–æ–Ω—å #{reservation['id']}

üìÖ –î–∞—Ç–∞: {formatted_date}
üïê –í—Ä–µ–º—è: {formatted_time}
üë• –ì–æ—Å—Ç–∏: {reservation['guests_count']}
üë§ –ò–º—è: {reservation['customer_name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {reservation['customer_phone']}
üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reservation['user_id']}

üìä –°—Ç–∞—Ç—É—Å: {reservation.get('status', 'pending')}
‚è∞ –°–æ–∑–¥–∞–Ω–∞: {formatted_created_at}
"""
    
    if reservation.get('notes'):
        base_text += f"üìù –ó–∞–º–µ—Ç–∫–∏: {reservation['notes']}\n"
    
    return base_text