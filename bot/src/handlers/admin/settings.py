from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from fluent.runtime import FluentLocalization
import logging

from src.states.settings import SettingsStates
from src.database.db_manager import DatabaseManager
from src.utils.config import settings
from src.utils.logger import get_logger
import src.handlers.admin.keyboards as kb

router = Router()
logger = get_logger(__name__)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message, l10n: FluentLocalization, db_manager: DatabaseManager):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    keyboard = await kb.get_settings_keyboard()
    await message.answer(
        "‚öôÔ∏è <b>–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(F.text == "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
async def admin_management(message: Message, db_manager: DatabaseManager):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    keyboard = await kb.get_admin_management_keyboard()
    await message.answer(
        "üëë <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò</b>\n\n"
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(F.text == "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º–∏")
async def staff_management(message: Message, db_manager: DatabaseManager):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º–∏"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    keyboard = await kb.get_staff_management_keyboard()
    await message.answer(
        "üë®‚Äçüíº <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–§–ò–¶–ò–ê–ù–¢–ê–ú–ò</b>\n\n"
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(F.text == "üçΩÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é")
async def menu_management(message: Message, db_manager: DatabaseManager):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    keyboard = await kb.get_menu_management_keyboard()
    await message.answer(
        "üçΩÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ –î–û–°–¢–ê–í–ö–ò</b>\n\n"
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(F.text == "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def block_management(message: Message, db_manager: DatabaseManager):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    keyboard = await kb.get_block_management_keyboard()
    await message.answer(
        "üö´ <b>–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
        "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def list_admins(message: Message, db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)"""
    try:
        admins = await db_manager.get_admins()
        
        if not admins:
            await message.answer("üëë <b>–°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í</b>\n\n–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        text = "üëë <b>–°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í</b>\n\n"
        
        for i, admin in enumerate(admins, 1):
            username = f"@{admin['username']}" if admin.get('username') and admin['username'] != 'unknown' else "–Ω–µ—Ç username"
            created_at = admin.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if hasattr(created_at, 'strftime'):
                created_at = created_at.strftime("%d.%m.%Y %H:%M")
            
            text += f"{i}. {admin['full_name']} ({username})\n"
            text += f"   üÜî ID: {admin['user_id']}\n"
            text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {created_at}\n\n"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå Error listing admins: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤")
async def list_staff(message: Message, db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)"""
    try:
        staff_list = await db_manager.get_staff()
        
        if not staff_list:
            await message.answer("üë®‚Äçüíº <b>–°–ü–ò–°–û–ö –û–§–ò–¶–ò–ê–ù–¢–û–í</b>\n\n–ù–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        text = "üë®‚Äçüíº <b>–°–ü–ò–°–û–ö –û–§–ò–¶–ò–ê–ù–¢–û–í</b>\n\n"
        
        for i, staff_member in enumerate(staff_list, 1):
            username = f"@{staff_member['username']}" if staff_member.get('username') and staff_member['username'] != 'unknown' else "–Ω–µ—Ç username"
            created_at = staff_member.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if hasattr(created_at, 'strftime'):
                created_at = created_at.strftime("%d.%m.%Y %H:%M")
            
            text += f"{i}. {staff_member['full_name']} ({username})\n"
            text += f"   üÜî ID: {staff_member['user_id']}\n"
            text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {created_at}\n\n"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå Error listing staff: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤")

@router.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é")
async def view_menu(message: Message, db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é"""
    try:
        menu_items = await db_manager.get_delivery_menu()
        
        if not menu_items:
            await message.answer("üì≠ –ú–µ–Ω—é –ø—É—Å—Ç–æ–µ")
            return
        
        text = "üçΩÔ∏è <b>–¢–ï–ö–£–©–ï–ï –ú–ï–ù–Æ</b>\n\n"
        
        current_category = ""
        for item in menu_items:
            if item['category'] != current_category:
                current_category = item['category']
                category_name = {
                    'breakfasts': 'üç≥ –ó–ê–í–¢–†–ê–ö–ò',
                    'hots': 'üç≤ –ì–û–†–Ø–ß–ï–ï', 
                    'hot_drinks': '‚òïÔ∏è –ì–û–†–Ø–ß–ò–ï –ù–ê–ü–ò–¢–ö–ò',
                    'cold_drinks': 'üç∏ –•–û–õ–û–î–ù–´–ï –ù–ê–ü–ò–¢–ö–ò',
                    'deserts': 'üç∞ –î–ï–°–ï–†–¢–´'
                }.get(current_category, current_category)
                text += f"\n{category_name}:\n"
            
            status = "‚úÖ" if item['is_available'] else "‚ùå"
            text += f"{status} <b>#{item['id']}</b> {item['name']} - {item['price']}‚ÇΩ\n"
            if item.get('description'):
                text += f"   <i>{item['description']}</i>\n"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå Error viewing menu: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

@router.message(F.text == "üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
async def list_blocked_users(message: Message, db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        blocked_users = await db_manager.get_blocked_users()
        
        if not blocked_users:
            await message.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        text = "üö´ <b>–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
        
        for i, user in enumerate(blocked_users, 1):
            username = f"@{user['username']}" if user.get('username') else "–Ω–µ—Ç username"
            text += f"{i}. {user['full_name']} ({username}) - ID: {user['user_id']}\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            blocked_at = user.get('updated_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if hasattr(blocked_at, 'strftime'):
                blocked_at = blocked_at.strftime("%d.%m.%Y %H:%M")
            text += f"   üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {blocked_at}\n\n"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå Error listing blocked users: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def back_to_settings(message: Message, l10n: FluentLocalization, db_manager: DatabaseManager):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await settings_menu(message, l10n, db_manager)

@router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_from_settings(message: Message, l10n: FluentLocalization, db_manager: DatabaseManager):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from src.handlers.user.message import show_main_menu
    await show_main_menu(message, l10n, db_manager)