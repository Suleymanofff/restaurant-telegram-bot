from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fluent.runtime import FluentLocalization
import logging

from src.states.settings import SettingsStates
from src.database.db_manager import DatabaseManager
from src.utils.config import settings
import src.handlers.admin.keyboards as kb

router = Router()
logger = logging.getLogger(__name__)

# ==================== INLINE KEYBOARDS ====================

def get_cancel_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_operation")
    return builder.as_markup()

# ==================== CANCEL HANDLER ====================

@router.callback_query(F.data == "cancel_operation")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é"""
    await state.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏—à–ª–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
    current_state = await state.get_state()
    
    if current_state in [
        SettingsStates.waiting_for_admin_id,
        SettingsStates.waiting_for_remove_admin_id
    ]:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
        await callback.message.edit_text(
            "üëë <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò</b>\n\n"
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            parse_mode="HTML"
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await kb.get_admin_management_keyboard()
        )
    
    elif current_state in [
        SettingsStates.waiting_for_staff_id,
        SettingsStates.waiting_for_remove_staff_id
    ]:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º–∏
        await callback.message.edit_text(
            "üë®‚Äçüíº <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–§–ò–¶–ò–ê–ù–¢–ê–ú–ò</b>\n\n"
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:",
            parse_mode="HTML"
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await kb.get_staff_management_keyboard()
        )
    
    elif current_state in [
        SettingsStates.waiting_for_menu_category,
        SettingsStates.waiting_for_dish_name,
        SettingsStates.waiting_for_dish_description,
        SettingsStates.waiting_for_dish_price,
        SettingsStates.waiting_for_remove_dish_id
    ]:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
        await callback.message.edit_text(
            "üçΩÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ –î–û–°–¢–ê–í–ö–ò</b>\n\n"
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥:",
            parse_mode="HTML"
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await kb.get_menu_management_keyboard()
        )
    
    elif current_state in [
        SettingsStates.waiting_for_block_user_id,
        SettingsStates.waiting_for_unblock_user_id
    ]:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await callback.message.edit_text(
            "üö´ <b>–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
            "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            parse_mode="HTML"
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await kb.get_block_management_keyboard()
        )
    
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            parse_mode="HTML"
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await kb.get_settings_keyboard()
        )
    
    await callback.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

# ==================== ADMIN MANAGEMENT ====================

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await message.answer(
        "üëë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        "üí° <i>ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @userinfobot</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_admin_id)

@router.message(SettingsStates.waiting_for_admin_id, F.text)
async def add_admin_finish(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    if await db_manager.is_admin(user_id):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=await kb.get_admin_management_keyboard()
        )
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ)
    user = await db_manager.get_user(user_id)
    username = user.get('username', 'unknown') if user else 'unknown'
    full_name = user.get('full_name', f'User_{user_id}') if user else f'User_{user_id}'

    success = await db_manager.add_admin(user_id, username, full_name)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.",
            reply_markup=await kb.get_admin_management_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.",
            reply_markup=await kb.get_admin_management_keyboard()
        )
    await state.clear()

@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin_start(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    admins = await db_manager.get_admins()
    if not admins:
        await message.answer("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    text = "üëë <b>–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n\n"
    for admin in admins:
        text += f"‚Ä¢ ID: {admin['user_id']} - {admin['full_name']} (@{admin['username']})\n"

    text += "\n–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_remove_admin_id)

@router.message(SettingsStates.waiting_for_remove_admin_id, F.text)
async def remove_admin_finish(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
    if user_id == message.from_user.id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è.")
        await state.clear()
        return

    success = await db_manager.remove_admin(user_id)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=await kb.get_admin_management_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=await kb.get_admin_management_keyboard()
        )
    await state.clear()

# ==================== STAFF MANAGEMENT ====================

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞")
async def add_staff_start(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await message.answer(
        "üë®‚Äçüíº <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º:\n"
        "üí° <i>ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @userinfobot</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_staff_id)

@router.message(SettingsStates.waiting_for_staff_id, F.text)
async def add_staff_finish(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º
    if await db_manager.is_staff(user_id):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º.",
            reply_markup=await kb.get_staff_management_keyboard()
        )
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db_manager.get_user(user_id)
    username = user.get('username', 'unknown') if user else 'unknown'
    full_name = user.get('full_name', f'User_{user_id}') if user else f'User_{user_id}'

    success = await db_manager.add_staff(user_id, username, full_name)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã.",
            reply_markup=await kb.get_staff_management_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã.",
            reply_markup=await kb.get_staff_management_keyboard()
        )
    await state.clear()

@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞")
async def remove_staff_start(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    staff = await db_manager.get_staff()
    if not staff:
        await message.answer("‚ùå –ù–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    text = "üë®‚Äçüíº <b>–¢–µ–∫—É—â–∏–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã:</b>\n\n"
    for staff_member in staff:
        text += f"‚Ä¢ ID: {staff_member['user_id']} - {staff_member['full_name']} (@{staff_member['username']})\n"

    text += "\n–í–≤–µ–¥–∏—Ç–µ ID –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_remove_staff_id)

@router.message(SettingsStates.waiting_for_remove_staff_id, F.text)
async def remove_staff_finish(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    success = await db_manager.remove_staff(user_id)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=await kb.get_staff_management_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=await kb.get_staff_management_keyboard()
        )
    await state.clear()

# ==================== MENU MANAGEMENT ====================

@router.message(F.text == "üçï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
async def add_dish_start(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    categories = await db_manager.get_delivery_categories()
    if not categories:
        await message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞.")
        return

    text = "üçΩÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n"
    for category in categories:
        category_name = {
            'breakfasts': 'üç≥ –ó–ê–í–¢–†–ê–ö–ò',
            'hots': 'üç≤ –ì–û–†–Ø–ß–ï–ï', 
            'hot_drinks': '‚òïÔ∏è –ì–û–†–Ø–ß–ò–ï –ù–ê–ü–ò–¢–ö–ò',
            'cold_drinks': 'üç∏ –•–û–õ–û–î–ù–´–ï –ù–ê–ü–ò–¢–ö–ò',
            'deserts': 'üç∞ –î–ï–°–ï–†–¢–´'
        }.get(category['category'], category['category'])
        text += f"‚Ä¢ {category_name}\n"

    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_menu_category)

@router.message(SettingsStates.waiting_for_menu_category, F.text)
async def add_dish_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–ª—é–¥–∞"""
    category_map = {
        'breakfasts': 'üç≥ –ó–ê–í–¢–†–ê–ö–ò',
        'hots': 'üç≤ –ì–û–†–Ø–ß–ï–ï', 
        'hot_drinks': '‚òïÔ∏è –ì–û–†–Ø–ß–ò–ï –ù–ê–ü–ò–¢–ö–ò',
        'cold_drinks': 'üç∏ –•–û–õ–û–î–ù–´–ï –ù–ê–ü–ò–¢–ö–ò',
        'deserts': 'üç∞ –î–ï–°–ï–†–¢–´'
    }
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É
    category_input = message.text.strip()
    category = category_map.get(category_input, category_input.lower())
    
    await state.update_data(category=category)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_dish_name)

@router.message(SettingsStates.waiting_for_dish_name, F.text)
async def add_dish_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
    name = message.text.strip()
    await state.update_data(name=name)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_dish_description)

@router.message(SettingsStates.waiting_for_dish_description, F.text)
async def add_dish_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞"""
    description = message.text.strip()
    if description == '-':
        description = None
    await state.update_data(description=description)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_dish_price)

@router.message(SettingsStates.waiting_for_dish_price, F.text)
async def add_dish_finish(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    try:
        price = float(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    data = await state.get_data()
    category = data['category']
    name = data['name']
    description = data.get('description')

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –±–∞–∑—É
    success = await db_manager.add_dish_to_menu(category, name, description, price)
    if success:
        await message.answer(
            f"‚úÖ –ë–ª—é–¥–æ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'.",
            reply_markup=await kb.get_menu_management_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ '{name}'.",
            reply_markup=await kb.get_menu_management_keyboard()
        )
    await state.clear()

@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ")
async def remove_dish_start(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    menu_items = await db_manager.get_delivery_menu()
    if not menu_items:
        await message.answer("‚ùå –ú–µ–Ω—é –ø—É—Å—Ç–æ–µ.")
        return

    text = "üçΩÔ∏è <b>–¢–µ–∫—É—â–µ–µ –º–µ–Ω—é:</b>\n\n"
    for item in menu_items:
        text += f"‚Ä¢ ID: {item['id']} - {item['name']} ({item['price']}‚ÇΩ)\n"

    text += "\n–í–≤–µ–¥–∏—Ç–µ ID –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_remove_dish_id)

@router.message(SettingsStates.waiting_for_remove_dish_id, F.text)
async def remove_dish_finish(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞"""
    try:
        dish_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    success = await db_manager.remove_dish_from_menu(dish_id)
    if success:
        await message.answer(
            f"‚úÖ –ë–ª—é–¥–æ —Å ID {dish_id} —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=await kb.get_menu_management_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ —Å ID {dish_id}.",
            reply_markup=await kb.get_menu_management_keyboard()
        )
    await state.clear()

# ==================== BLOCK MANAGEMENT ====================

@router.message(F.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def block_user_start(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await message.answer(
        "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_block_user_id)

@router.message(SettingsStates.waiting_for_block_user_id, F.text)
async def block_user_finish(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è
    if user_id == message.from_user.id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏ —Å–µ–±—è.")
        await state.clear()
        return

    success = await db_manager.block_user(user_id)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=await kb.get_block_management_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.",
            reply_markup=await kb.get_block_management_keyboard()
        )
    await state.clear()

@router.message(F.text == "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
async def unblock_user_start(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await db_manager.is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    await message.answer(
        "‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
    )
    await state.set_state(SettingsStates.waiting_for_unblock_user_id)

@router.message(SettingsStates.waiting_for_unblock_user_id, F.text)
async def unblock_user_finish(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_cancel_keyboard()
        )
        return

    success = await db_manager.unblock_user(user_id)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=await kb.get_block_management_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.",
            reply_markup=await kb.get_block_management_keyboard()
        )
    await state.clear()