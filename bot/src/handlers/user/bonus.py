from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fluent.runtime import FluentLocalization
import logging
from datetime import datetime

from src.database.db_manager import DatabaseManager
from src.utils.logger import get_logger

router = Router()
logger = get_logger(__name__)

class LoyaltyCardManager:
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
    
    async def get_loyalty_card_info(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            user = await self.db_manager.get_user(user_id)
            bonus_balance = user.get('bonus_balance', 0) if user else 0
            transactions = await self.db_manager.get_bonus_transactions(user_id, limit=5)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
            earned = sum(t['amount'] for t in transactions if t['amount'] > 0)
            spent = abs(sum(t['amount'] for t in transactions if t['amount'] < 0))
            
            return {
                'balance': bonus_balance,
                'transactions': transactions,
                'stats': {
                    'earned': earned,
                    'spent': spent,
                    'total_orders': len([t for t in transactions if t['type'] == 'cashback'])
                }
            }
        except Exception as e:
            logger.error(f"‚ùå Error getting loyalty card info: {e}")
            return {'balance': 0, 'transactions': [], 'stats': {'earned': 0, 'spent': 0, 'total_orders': 0}}

@router.message(F.text == "üí≥ –ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
async def loyalty_program_handler(message: Message, l10n: FluentLocalization, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'"""
    try:
        user_id = message.from_user.id
        
        # üî• –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú, –ß–¢–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–£–©–ï–°–¢–í–£–ï–¢ –í –ë–ê–ó–ï
        await db_manager.ensure_user_exists(
            user_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        
        loyalty_manager = LoyaltyCardManager(db_manager)
        card_info = await loyalty_manager.get_loyalty_card_info(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = await format_loyalty_card_message(card_info, db_manager)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text="üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", 
            callback_data="bonus_history"
        )
        
        builder.button(
            text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã", 
            callback_data="bonus_rules"
        )
        
        builder.button(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
            callback_data="refresh_bonus"
        )
        
        builder.adjust(1)
        
        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db_manager.add_user_action(
            user_id=user_id,
            action_type='loyalty_program_click'
        )
        
        logger.info(f"üí≥ Loyalty card shown to user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in loyalty_program_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.")

async def format_loyalty_card_message(card_info: dict, db_manager=None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    balance = card_info['balance']
    stats = card_info['stats']
    transactions = card_info['transactions']
    
    text = "üí≥ <b>–í–ê–®–ê –ö–ê–†–¢–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò</b>\n\n"
    
    # –ë–∞–ª–∞–Ω—Å
    text += f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance}‚ÇΩ</code>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['earned']}‚ÇΩ\n"
    text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['spent']}‚ÇΩ\n"
    text += f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ —Å –∫–µ—à–±—ç–∫–æ–º: {stats['total_orders']}\n\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if transactions:
        text += "üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
        for transaction in transactions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ
            emoji = "‚¨ÜÔ∏è" if transaction['amount'] > 0 else "‚¨áÔ∏è"
            sign = "+" if transaction['amount'] > 0 else ""
            date = transaction['created_at'].strftime("%d.%m %H:%M")
            
            # –£–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
            description = transaction['description']
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ db_manager
            if '—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' in description.lower() and db_manager:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    import re
                    user_id_match = re.search(r'(\d+)', description)
                    if user_id_match:
                        referred_user_id = int(user_id_match.group(1))
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        referred_user = await db_manager.get_user(referred_user_id)
                        if referred_user:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ full_name
                            if referred_user.get('username'):
                                user_display = f"@{referred_user['username']}"
                            else:
                                user_display = referred_user.get('full_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                            description = f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ {user_display}"
                except Exception as e:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    print(f"‚ùå Error formatting referral description: {e}")
            
            text += f"{emoji} {sign}{transaction['amount']}‚ÇΩ - {description}\n"
            text += f"   <i>{date}</i>\n\n"
    else:
        text += "üìù <i>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –±–æ–Ω—É—Å–Ω–æ–º—É —Å—á–µ—Ç—É</i>\n\n"
    
    # –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    text += "üéØ <b>–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>\n"
    text += "‚Ä¢ <b>5% –∫–µ—à–±—ç–∫</b> –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞\n"
    text += "‚Ä¢ –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å <b>–¥–æ 50%</b> —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –±–æ–Ω—É—Å–∞–º–∏\n"
    text += "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –±–æ–Ω—É—Å–æ–≤: <b>500‚ÇΩ</b>\n"
    text += "‚Ä¢ –ë–æ–Ω—É—Å—ã <b>–Ω–µ —Å–≥–æ—Ä–∞—é—Ç</b>\n\n"
    
    text += "üí° <i>–ë–æ–Ω—É—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–∫–∞–∑–µ</i>"
    
    return text

@router.callback_query(F.data == "bonus_history")
async def show_bonus_history(callback: CallbackQuery, db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤"""
    try:
        user_id = callback.from_user.id
        transactions = await db_manager.get_bonus_transactions(user_id, limit=20)

        kb = InlineKeyboardBuilder()
        kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ", callback_data="back_to_loyalty_card")
        
        if not transactions:
            await callback.message.edit_text(
                "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –±–æ–Ω—É—Å–Ω–æ–º—É —Å—á–µ—Ç—É.",
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )
            return
        
        text = "üìä <b>–ü–û–õ–ù–ê–Ø –ò–°–¢–û–†–ò–Ø –û–ü–ï–†–ê–¶–ò–ô</b>\n\n"
        
        for transaction in transactions:
            emoji = "üü¢" if transaction['amount'] > 0 else "üî¥"
            sign = "+" if transaction['amount'] > 0 else ""
            date = transaction['created_at'].strftime("%d.%m.%Y %H:%M")
            
            text += f"{emoji} <b>{date}</b>\n"
            text += f"   {transaction['description']}\n"
            text += f"   –°—É–º–º–∞: <code>{sign}{transaction['amount']}‚ÇΩ</code>\n\n"
        
        
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in show_bonus_history: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)

@router.callback_query(F.data == "bonus_rules")
async def show_bonus_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        text = (
            "üìã <b>–ü–†–ê–í–ò–õ–ê –ë–û–ù–£–°–ù–û–ô –ü–†–û–ì–†–ê–ú–ú–´</b>\n\n"
            
            "üíé <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤:</b>\n"
            "‚Ä¢ <b>5% –∫–µ—à–±—ç–∫</b> –æ—Ç —Å—É–º–º—ã –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞\n"
            "‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤ –∞–∫—Ü–∏—è—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n\n"
            
            "üí∞ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤:</b>\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å <b>–¥–æ 50%</b> —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: <b>500‚ÇΩ</b>\n"
            "‚Ä¢ –ë–æ–Ω—É—Å—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏\n"
            "‚Ä¢ –ù–µ–ª—å–∑—è –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–æ–º—É –ª–∏—Ü—É\n\n"
            
            "‚è∞ <b>–°—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            "‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç\n"
            "‚Ä¢ –ù–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è\n\n"
            
            "üéÅ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            
            "‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ", callback_data="back_to_loyalty_card")
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in show_bonus_rules: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª", show_alert=True)

@router.callback_query(F.data == "refresh_bonus")
async def refresh_bonus_info(callback: CallbackQuery, db_manager: DatabaseManager):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö"""
    try:
        user_id = callback.from_user.id
        loyalty_manager = LoyaltyCardManager(db_manager)
        card_info = await loyalty_manager.get_loyalty_card_info(user_id)
        
        text = await format_loyalty_card_message(card_info)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="bonus_history")
        builder.button(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="bonus_rules")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_bonus")
        builder.adjust(1)
        
        try:
            await callback.message.edit_text(
                text, 
                parse_mode="HTML", 
                reply_markup=builder.as_markup()
            )
            await callback.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                await callback.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                raise edit_error
        
    except Exception as e:
        logger.error(f"‚ùå Error in refresh_bonus_info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data == "back_to_loyalty_card")
async def back_to_loyalty_card(callback: CallbackQuery, db_manager: DatabaseManager):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ä—Ç–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        user_id = callback.from_user.id
        loyalty_manager = LoyaltyCardManager(db_manager)
        card_info = await loyalty_manager.get_loyalty_card_info(user_id)
        
        text = await format_loyalty_card_message(card_info)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="bonus_history")
        builder.button(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="bonus_rules")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_bonus")
        builder.adjust(1)
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in back_to_loyalty_card: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ", show_alert=True)