from typing import List
from aiogram import Router, F
from aiogram.types import CallbackQuery
from fluent.runtime import FluentLocalization
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

import src.handlers.user.keyboards as kb
from src.states.call_stuff import CallStaff
from src.states.greetings import Greeting
from src.utils.logger import get_logger

from src.utils.time_utils import format_restaurant_time

from datetime import datetime

router = Router()
logger = get_logger(__name__)

# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–∑–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
@router.callback_query(F.data == "confirm_staff_call")
async def confirm_staff_call(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization, db_manager=None, settings=None):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    call_id = data.get('call_id')
    table_number = data.get('table_number')
    
    if not call_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    # –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤, –∞ —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    if db_manager:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.add_user_action(
            user_id=callback.from_user.id,
            action_type='staff_call_confirmed',
            action_data={'call_id': call_id, 'table_number': table_number}
        )
        
        # ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–£ (–Ω–æ –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤)
        user = callback.from_user
        user_info = f"{user.full_name} (@{user.username})" if user.username else user.full_name
        
        # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_ids –∏ –≤—Ä–µ–º—è
        message_ids, call_time = await notify_staff_about_call(
            bot=callback.bot,
            table_number=table_number,
            user_info=user_info,
            call_id=call_id,
            db_manager=db_manager
        )
    
    text = l10n.format_value("staff-called-message")
    await callback.message.edit_text(text=text)
    await state.clear()

# –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
@router.callback_query(F.data == "cancel_staff_call")
async def cancel_staff_call(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization, db_manager = None):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    call_id = data.get('call_id')
    table_number = data.get('table_number')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–∑–æ–≤–∞ –≤ –ë–î –Ω–∞ 'cancelled'
    if db_manager and call_id:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–∞
        await db_manager.cancel_staff_call(call_id)
        await db_manager.add_user_action(
            user_id=callback.from_user.id,
            action_type='staff_call_cancelled',
            action_data={'call_id': call_id, 'table_number': table_number}
        )
    
    text = l10n.format_value("cancel-staff-call")
    await callback.message.edit_text(text=text)
    await state.clear()  # ‚úÖ –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —á—Ç–æ –æ–Ω –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞
@router.callback_query(F.data.in_(["user_sex_male", "user_sex_female"]))
async def confirm_sex_and_ask_major(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization, db_manager = None):
    await callback.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sex = callback.data
    if sex == "user_sex_male":
        sex = "male"
        await state.update_data(sex=sex)
    else:
        sex = "female"
        await state.update_data(sex=sex)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if db_manager:
        await db_manager.update_user_profile(
            user_id=callback.from_user.id,
            sex=sex,
            major='unknown'  # –ü–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        )
        await db_manager.add_user_action(
            user_id=callback.from_user.id,
            action_type='sex_selected',
            action_data={'sex': sex}
        )
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ —Ç–∞–∫–æ–µ –∂–µ, –Ω–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–µ–Ω—è–ª —Å–≤–æ–π –≤—ã–±–æ—Ä
    text_before = l10n.format_value("who-are-you")
    await callback.message.edit_text(text=text_before)

    text = l10n.format_value(
        "ask-major",
        {
            "sex": await get_ru_by_eng(sex)
        }
    )
    await callback.message.answer(text=text, reply_markup=await kb.get_user_major_kb(l10n))
    await state.set_state(Greeting.get_major)

@router.callback_query(Greeting.get_major, F.data.in_([
    "user_major_student", 
    "user_major_entrepreneur", 
    "user_major_hire", 
    "user_major_frilans"
]))
async def confirm_major_and_send_main_menu(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization, db_manager = None):
    await callback.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    major = callback.data
    if major == "user_major_student":
        major = "student"
        await state.update_data(major=major)
    elif major == "user_major_entrepreneur":
        major = "entrepreneur"
        await state.update_data(major=major)
    elif major == "user_major_hire":
        major = "hire"
        await state.update_data(major=major)
    elif major == "user_major_frilans":
        major = "frilans"
        await state.update_data(major=major)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_sex = user_data["sex"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if db_manager:
        await db_manager.update_user_profile(
            user_id=callback.from_user.id,
            sex=user_sex,
            major=major
        )
        await db_manager.add_user_action(
            user_id=callback.from_user.id,
            action_type='major_selected',
            action_data={'major': major}
        )

    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ —Ç–∞–∫–æ–µ –∂–µ, –Ω–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–µ–Ω—è–ª —Å–≤–æ–π –≤—ã–±–æ—Ä
    text_before = l10n.format_value(
        "ask-major",
        {
            "sex": await get_ru_by_eng(user_sex)
        }
    )
    await callback.message.edit_text(text=text_before)
    
    text = l10n.format_value(
        "messages-before-main-menu",
        {
            "major": await get_ru_by_eng(major)
        }
    )
    await callback.message.answer(text=text)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ë–ï–ó —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    welcome_text = l10n.format_value("main-menu-text")
    keyboard = await kb.get_main_menu_keyboard(l10n, user_id=callback.from_user.id)
    await callback.message.answer(welcome_text, reply_markup=keyboard)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.clear()

async def get_ru_by_eng(sex: str) -> str:
    translations = {
        "male": "–ø–∞—Ä–µ–Ω—å",
        "female": "–¥–µ–≤—É—à–∫–∞",
        "student": "—Å—Ç—É–¥–µ–Ω—Ç",
        "entrepreneur": "–ø—Ä–µ–¥–ø—Ä–µ–Ω–∏–º–∞—Ç–µ–ª—å",
        "hire": "–ù–∞–π–º",
        "frilans": "—Ñ—Ä–∏–ª–∞–Ω—Å",
    }

    return translations[sex].capitalize()


async def get_all_staff_users(db_manager):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        staff_users = await db_manager.get_staff()
        admin_users = await db_manager.get_admins()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_staff = staff_users + admin_users
        staff_ids = list(set([user['user_id'] for user in all_staff]))
        return staff_ids
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {e}")
        return []

async def notify_staff_about_call(bot, table_number: int, user_info: str, call_id: int, db_manager=None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∞–¥–º–∏–Ω—ã + —Å—Ç–∞—Ñ—Ñ) –æ –Ω–æ–≤–æ–º –≤—ã–∑–æ–≤–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
    try:
        from src.utils.config import settings
        
        message_ids = {}
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept_call_{call_id}")
        
        current_time = format_restaurant_time()
        
        message_text = (
            f"üÜò <b>–ù–û–í–´–ô –í–´–ó–û–í –ü–ï–†–°–û–ù–ê–õ–ê</b>\n\n"
            f"ü™ë <b>–°—Ç–æ–ª:</b> #{table_number}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_info}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}\n"
            f"üÜî <b>ID –≤—ã–∑–æ–≤–∞:</b> {call_id}\n\n"
            f"<i>–ö—Ç–æ –ø–µ—Ä–≤—ã–π —É—Å–ø–µ–µ—Ç - —Ç–æ–≥–æ –∏ –∫–ª–∏–µ–Ω—Ç!</i>"
        )
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –ë–î, –∞ –Ω–µ –∏–∑ .env
        if db_manager:
            staff_ids = await get_all_staff_users(db_manager)
            logger.info(f"üë• –ê–∫—Ç—É–∞–ª—å–Ω—ã–π ID –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ –ë–î –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {staff_ids}")
        else:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ db_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            staff_ids = [int(staff_id.strip()) for staff_id in settings.STAFF_IDS.split(",")]
            logger.info(f"üë• –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–∑ settings: {staff_ids}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú–£ –ø–µ—Ä—Å–æ–Ω–∞–ª—É (–∞–¥–º–∏–Ω—ã + —Å—Ç–∞—Ñ—Ñ)
        for staff_id in staff_ids:
            try:
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É {staff_id}")
                message = await bot.send_message(
                    chat_id=staff_id,
                    text=message_text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode="HTML"
                )
                message_ids[staff_id] = message.message_id
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É {staff_id}, message_id: {message.message_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—É {staff_id}: {e}")
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_ids –≤ –ë–î: {message_ids}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –ë–î
        if db_manager:
            success = await db_manager.update_call_message_ids(call_id, message_ids)
            if success:
                logger.info(f"‚úÖ Message_ids —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è –≤—ã–∑–æ–≤–∞ #{call_id}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è message_ids –≤ –ë–î –¥–ª—è –≤—ã–∑–æ–≤–∞ #{call_id}")
        else:
            logger.error(f"‚ùå DB manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è message_ids")
        
        return message_ids, current_time
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notify_staff_about_call: {e}", exc_info=True)
        return {}, ""