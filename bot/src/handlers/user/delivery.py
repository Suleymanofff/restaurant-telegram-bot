from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact, ReplyKeyboardRemove, ContentType, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from fluent.runtime import FluentLocalization
import logging

from src.database.db_manager import DatabaseManager
from src.states.delivery import DeliveryStates
import src.handlers.user.keyboards as kb
from src.utils.rate_limiter import rate_limit
from src.handlers.user.message import show_main_menu
from src.utils.config import settings
from src.states.payment import PaymentStates

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üõµ –î–æ—Å—Ç–∞–≤–∫–∞")
@rate_limit(cooldown=10, action="delivery_start")
async def start_delivery(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager=None):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
    try:
        await state.clear()
        await state.update_data(cart=[], delivery_info={})
        
        text = "üçΩÔ∏è <b>–î–û–°–¢–ê–í–ö–ê –ï–î–´</b>\n\n"
        text += "üöó <b>–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
        text += "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 500‚ÇΩ\n"
        text += "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 1500‚ÇΩ\n"
        text += "‚Ä¢ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 30-45 –º–∏–Ω—É—Ç\n"
        text += "‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º: 10:00 - 23:00\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        
        await state.set_state(DeliveryStates.choosing_category)
        await message.answer(text, parse_mode="HTML", reply_markup=await kb.get_delivery_categories_kb(l10n))
        
        if db_manager:
            await db_manager.add_user_action(
                user_id=message.from_user.id,
                action_type='delivery_started'
            )
            
    except Exception as e:
        logger.error(f"‚ùå Error starting delivery: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
        await state.clear()

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart_handler(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await view_cart_from_anywhere(message, state, l10n)

@router.message(DeliveryStates.viewing_menu, F.text == "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def back_to_categories_from_menu(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –º–µ–Ω—é"""
    await state.set_state(DeliveryStates.choosing_category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.get_delivery_categories_kb(l10n))

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    current_state = await state.get_state()
    
    if current_state == DeliveryStates.choosing_category:
        await state.clear()
        await show_main_menu(message, l10n, db_manager)
    elif current_state == DeliveryStates.viewing_menu:
        await state.set_state(DeliveryStates.choosing_category)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.get_delivery_categories_kb(l10n))
    elif current_state == DeliveryStates.viewing_cart:
        data = await state.get_data()
        current_category_name = data.get('current_category_name', '–º–µ–Ω—é')
        await state.set_state(DeliveryStates.viewing_menu)
        await message.answer(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ {current_category_name}", reply_markup=await kb.get_delivery_menu_kb(l10n))
    else:
        await state.clear()
        await show_main_menu(message, l10n, db_manager)

@router.message(DeliveryStates.choosing_category, F.text.in_(["üç≥ –ó–ê–í–¢–†–ê–ö–ò", "üç≤ –ì–û–†–Ø–ß–ï–ï", "‚òïÔ∏è –ì–û–†–Ø–ß–ò–ï –ù–ê–ü–ò–¢–ö–ò", "üç∏ –•–û–õ–û–î–ù–´–ï –ù–ê–ü–ò–¢–ö–ò", "üç∞ –î–ï–°–ï–†–¢–´"]))
async def choose_category(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category_map = {
            'üç≥ –ó–ê–í–¢–†–ê–ö–ò': 'breakfasts',
            'üç≤ –ì–û–†–Ø–ß–ï–ï': 'hots', 
            '‚òïÔ∏è –ì–û–†–Ø–ß–ò–ï –ù–ê–ü–ò–¢–ö–ò': 'hot_drinks',
            'üç∏ –•–û–õ–û–î–ù–´–ï –ù–ê–ü–ò–¢–ö–ò': 'cold_drinks',
            'üç∞ –î–ï–°–ï–†–¢–´': 'deserts'
        }
        
        category_key = category_map.get(message.text)
        if not category_key:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        menu_items = await db_manager.get_delivery_menu(category_key) if db_manager else []
        
        if not menu_items:
            await message.answer("üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥")
            return
        
        await state.update_data(current_category=category_key, current_category_name=message.text)
        
        text = f"<b>{message.text}</b>\n\n"
        
        for item in menu_items:
            text += f"<b>{item['id']}. {item['name']}</b> - {item['price']}‚ÇΩ\n"
            if item.get('description'):
                text += f"<i>{item['description']}</i>\n"
            text += "\n"
        
        text += "üí° <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É:</b>\n"
        text += "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1</code>)\n"
        text += "‚Ä¢ –ò–ª–∏ <code>–¥–æ–±–∞–≤–∏—Ç—å [–Ω–æ–º–µ—Ä]</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–¥–æ–±–∞–≤–∏—Ç—å 1</code>)\n\n"
        text += "üõí –ù–∞–∂–º–∏—Ç–µ '–ö–æ—Ä–∑–∏–Ω–∞' —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –∑–∞–∫–∞–∑"
        
        await state.set_state(DeliveryStates.viewing_menu)
        await message.answer(text, parse_mode="HTML", reply_markup=await kb.get_delivery_menu_kb(l10n))
        
    except Exception as e:
        logger.error(f"‚ùå Error choosing category: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

@router.message(DeliveryStates.viewing_menu, F.text)
async def add_to_cart_flexible(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager=None):
    """–ì–∏–±–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        text = message.text.lower().strip()
        
        if text == "üîô –Ω–∞–∑–∞–¥":
            await state.set_state(DeliveryStates.choosing_category)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.get_delivery_categories_kb(l10n))
            return
            
        if text == "üìã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            await state.set_state(DeliveryStates.choosing_category)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.get_delivery_categories_kb(l10n))
            return
        
        item_id = None
        if text.isdigit():
            item_id = int(text)
        elif text.startswith('–¥–æ–±–∞–≤–∏—Ç—å') and len(text.split()) > 1:
            try:
                item_id = int(text.split()[1])
            except ValueError:
                pass
        
        if not item_id:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '1' –∏–ª–∏ '–¥–æ–±–∞–≤–∏—Ç—å 1'")
            return
        
        data = await state.get_data()
        current_category = data.get('current_category', 'pizza')
        menu_items = await db_manager.get_delivery_menu(current_category) if db_manager else []
        
        item = next((item for item in menu_items if item['id'] == item_id), None)
        
        if not item:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        
        cart = data.get('cart', [])
        existing_item = next((cart_item for cart_item in cart if cart_item['id'] == item['id']), None)
        
        if existing_item:
            existing_item['quantity'] += 1
        else:
            cart.append({
                'id': item['id'],
                'name': item['name'],
                'price': float(item['price']),
                'quantity': 1
            })
        
        await state.update_data(cart=cart)
        total = sum(item['price'] * item['quantity'] for item in cart)
        
        await message.answer(
            f"‚úÖ <b>{item['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n\n"
            f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {len(cart)} –ø–æ–∑–∏—Ü–∏–π\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ",
            parse_mode="HTML"
        )
        
        if db_manager:
            await db_manager.add_user_action(
                user_id=message.from_user.id,
                action_type='delivery_item_added',
                action_data={'item_id': item['id'], 'item_name': item['name']}
            )
            
    except Exception as e:
        logger.error(f"‚ùå Error adding to cart: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")

@router.message(DeliveryStates.viewing_cart, F.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_checkout(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager = None):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫ –∏ –±–æ–Ω—É—Å–æ–≤"""
    try:
        data = await state.get_data()
        cart = data.get('cart', [])
        
        if not cart:
            await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.")
            return
        
        # –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤
        subtotal = sum(item['price'] * item['quantity'] for item in cart)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
        if subtotal < 500:
            await message.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 500‚ÇΩ\n"
                f"üí∞ –í–∞—à–∞ —Å—É–º–º–∞: {subtotal}‚ÇΩ\n"
                f"üì¶ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–∞ {500 - subtotal}‚ÇΩ"
            )
            return
        
        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = 0 if subtotal >= 1500 else 200
        total_before_discount = subtotal + delivery_cost
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
        user = await db_manager.get_user(message.from_user.id)
        discount = 0
        
        logger.info(f"üîç Start checkout: user_id={message.from_user.id}, has_referrer={user and user.get('referrer_id')}")
        
        if user and user.get('referrer_id'):
            is_first = await is_first_order(message.from_user.id, db_manager)
            logger.info(f"üîç First order check in checkout: {is_first}")
            if is_first:
                discount = total_before_discount * 0.10
                logger.info(f"üîç Applying 10% discount in checkout: {discount}‚ÇΩ")
        
        total_after_discount = total_before_discount - discount
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        bonus_balance = await db_manager.get_user_bonus_balance(message.from_user.id)
        max_bonus_usage = total_after_discount * 0.6  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 60% –æ—Ç —Å—É–º–º—ã
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
        await state.update_data(
            subtotal=subtotal,
            delivery_cost=delivery_cost,
            total_before_discount=total_before_discount,
            discount=discount,
            total_after_discount=total_after_discount,
            bonus_balance=bonus_balance,
            max_bonus_usage=max_bonus_usage
        )
        
        logger.info(f"üî¢ Checkout totals: subtotal={subtotal}, delivery={delivery_cost}, discount={discount}, total_after_discount={total_after_discount}")
        
        text = "üìù <b>–û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê</b>\n\n"
        text += f"üõí <b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n"
        
        for item in cart:
            text += f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price'] * item['quantity']}‚ÇΩ\n"
        
        text += f"\nüí∞ <b>–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b> {subtotal}‚ÇΩ\n"
        
        if delivery_cost > 0:
            text += f"üöó <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_cost}‚ÇΩ\n"
        else:
            text += f"üéâ <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
        if discount > 0:
            text += f"üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 10%:</b> -{discount:.0f}‚ÇΩ\n"
        
        text += f"üí∞ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total_after_discount}‚ÇΩ\n\n"
        
        if bonus_balance > 0:
            text += f"üí≥ <b>–í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {bonus_balance}‚ÇΩ\n"
            text += f"üíé <b>–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b> –¥–æ {max_bonus_usage:.0f}‚ÇΩ\n\n"
        
        text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:"
        
        await state.set_state(DeliveryStates.entering_name)
        await message.answer(text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        
    except Exception as e:
        logger.error(f"‚ùå Error starting checkout: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@router.message(DeliveryStates.entering_name, F.text)
async def enter_customer_name(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–í–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(customer_name=name)
    await state.set_state(DeliveryStates.entering_phone)
    
    builder = ReplyKeyboardBuilder()
    builder.button(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(1)
    
    await message.answer(
        f"üë§ –ò–º—è: <b>{name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω':",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@router.message(DeliveryStates.entering_phone, F.contact)
async def enter_phone_from_contact(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    phone = message.contact.phone_number
    await process_phone_number(message, state, phone)

@router.message(DeliveryStates.entering_phone, F.text)
async def enter_phone_manual(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(DeliveryStates.viewing_cart)
        await view_cart_from_anywhere(message, state, l10n)
        return
    
    phone = message.text.strip()
    await process_phone_number(message, state, phone)

async def process_phone_number(message: Message, state: FSMContext, phone: str):
    """–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    clean_phone = ''.join(filter(str.isdigit, phone))
    
    if len(clean_phone) < 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(customer_phone=clean_phone)
    await state.set_state(DeliveryStates.entering_address)
    
    await message.answer(
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{clean_phone}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b> (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(DeliveryStates.entering_address, F.text)
async def enter_delivery_address_with_referral(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager = None):
    """–í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
    address = message.text.strip()
    
    if len(address) < 10:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(delivery_address=address)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Ä–µ—Ñ–µ—Ä–µ—Ä
    user = await db_manager.get_user(message.from_user.id)
    has_referrer = user and user.get('referrer_id')
    
    if has_referrer:
        # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —É–∂–µ –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ–Ω—É—Å–æ–≤
        await state.set_state(DeliveryStates.using_bonus)
        await process_bonus_step(message, state, db_manager)
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        await state.set_state(DeliveryStates.entering_referral)
        
        text = (
            f"üè† <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:</b> {address}\n\n"
            f"üéÅ <b>–ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥?</b>\n\n"
            f"–ï—Å–ª–∏ –¥—Ä—É–≥ –¥–∞–ª –≤–∞–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ <b>10% —Å–∫–∏–¥–∫—É</b> –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üí° <b>–ß—Ç–æ –¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b>\n"
            f"‚Ä¢ <b>10% —Å–∫–∏–¥–∫–∞</b> –Ω–∞ –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n"
            f"‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç <b>200‚ÇΩ</b> –Ω–∞ —Å—á–µ—Ç\n"
            f"‚Ä¢ –í—ã –æ–±–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b>\n"
            f"(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"
        )
        
        builder = ReplyKeyboardBuilder()
        builder.button(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        builder.adjust(1)
        
        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())



@router.message(DeliveryStates.entering_referral, F.text)
async def enter_referral_code_during_checkout(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        user_input = message.text.strip()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        if user_input in ["0", "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"]:
            await state.set_state(DeliveryStates.using_bonus)
            await process_bonus_step(message, state, db_manager)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        referral_code = user_input.upper()
        
        logger.info(f"üîç Processing referral code: {referral_code} for user {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥
        user_referral_code = await db_manager.get_referral_code(message.from_user.id)
        if referral_code == user_referral_code:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
            return
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
        referrer = await db_manager.get_user_by_referral_code(referral_code)
        if not referrer:
            await message.answer("‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if referrer['user_id'] == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        success = await db_manager.set_user_referrer(message.from_user.id, referrer['user_id'])
        if success:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
            await db_manager.add_referral_bonus(
                referrer_id=referrer['user_id'],
                referred_id=message.from_user.id,
                bonus_amount=200.00
            )
            
            # –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú –ó–ê–ö–ê–ó –° –£–ß–ï–¢–û–ú –°–ö–ò–î–ö–ò
            logger.info(f"üîç Before recalculation for user {message.from_user.id}")
            new_totals = await recalculate_order_after_referral(state, db_manager, message.from_user.id)
            logger.info(f"üîç After recalculation: discount={new_totals['discount']}, total_after_discount={new_totals['total_after_discount']}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                referrer_notification = (
                    f"üéâ <b>–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                    f"üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤–∞—à –∫–æ–¥: {referral_code}\n\n"
                    f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>200‚ÇΩ</b> –ø–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!\n"
                    f"üí≥ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ 'üí≥ –ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'"
                )
                await message.bot.send_message(
                    chat_id=referrer['user_id'],
                    text=referrer_notification,
                    parse_mode="HTML"
                )
            except Exception as notify_error:
                logger.error(f"‚ùå Failed to notify referrer: {notify_error}")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ù–û–í–û–ô –°–£–ú–ú–û–ô
            success_text = (
                f"‚úÖ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>10% —Å–∫–∏–¥–∫—É</b> –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑!\n"
            )
            
            if new_totals['discount'] > 0:
                success_text += f"üí∞ –°–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: <b>-{new_totals['discount']:.0f}‚ÇΩ</b>\n\n"
                success_text += f"üí° –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É.\n"
                success_text += f"üí∞ <b>–ù–æ–≤–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {new_totals['total_after_discount']}‚ÇΩ\n\n"
            else:
                success_text += f"‚ö†Ô∏è <b>–ù–æ —Å–∫–∏–¥–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!</b>\n"
                success_text += f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {new_totals['total_after_discount']}‚ÇΩ\n\n"
                success_text += f"‚ÑπÔ∏è –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –∑–∞–∫–∞–∑—É.\n\n"
            
            success_text += f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–∏—Ç 200‚ÇΩ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
            
            await message.answer(success_text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await db_manager.add_user_action(
                user_id=message.from_user.id,
                action_type='referral_code_activated_during_checkout',
                action_data={'referrer_id': referrer['user_id'], 'referral_code': referral_code, 'discount': new_totals['discount']}
            )
            
            logger.info(f"‚úÖ Referral code activated during checkout: user {message.from_user.id} -> referrer {referrer['user_id']}, discount: {new_totals['discount']}‚ÇΩ")
            
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ–Ω—É—Å–æ–≤
        await state.set_state(DeliveryStates.using_bonus)
        await process_bonus_step(message, state, db_manager)
            
    except Exception as e:
        logger.error(f"‚ùå Error processing referral code during checkout: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")



async def process_bonus_step(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–Ω—É—Å–æ–≤
        data = await state.get_data()
        total_after_discount = data.get('total_after_discount', 0)
        bonus_balance = await db_manager.get_user_bonus_balance(message.from_user.id)
        max_bonus_usage = total_after_discount * 0.6  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 60% –æ—Ç —Å—É–º–º—ã
        
        text = f"üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total_after_discount}‚ÇΩ\n"
        
        if bonus_balance > 0:
            text += (
                f"\nüí≥ <b>–í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {bonus_balance}‚ÇΩ\n"
                f"üíé <b>–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b> –¥–æ {max_bonus_usage:.0f}‚ÇΩ\n\n"
                f"üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã?</b>\n"
                f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è\n"
                f"‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 60% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞\n"
                f"‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã\n\n"
                f"<b>–°–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b>"
            )
        else:
            text += "\nüí° –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n–í–≤–µ–¥–∏—Ç–µ 0 —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå Error in process_bonus_step: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ–Ω—É—Å–æ–≤.")


@router.message(DeliveryStates.using_bonus, F.text)
async def enter_bonus_amount(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        bonus_used = float(message.text.strip())
        
        if bonus_used < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        total_after_discount = data.get('total_after_discount', 0)
        bonus_balance = data.get('bonus_balance', 0)
        max_bonus_usage = data.get('max_bonus_usage', 0)
        discount = data.get('discount', 0)
        
        available_bonus = min(bonus_balance, max_bonus_usage)
        
        if bonus_used > available_bonus:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {available_bonus:.0f}‚ÇΩ\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        if bonus_used > max_bonus_usage:
            await message.answer(
                f"‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {max_bonus_usage:.0f}‚ÇΩ (60% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞)\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
        await state.update_data(bonus_used=bonus_used)
        await state.set_state(DeliveryStates.confirming_order)
        
        # –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        final_amount = total_after_discount - bonus_used
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = "‚úÖ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê</b>\n\n"
        text += f"üë§ <b>–ò–º—è:</b> {data['customer_name']}\n"
        text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['customer_phone']}\n"
        text += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {data['delivery_address']}\n\n"
        
        text += "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        cart = data.get('cart', [])
        for item in cart:
            text += f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price'] * item['quantity']}‚ÇΩ\n"
        
        text += f"\nüí∞ <b>–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b> {data.get('subtotal', 0)}‚ÇΩ\n"
        
        delivery_cost = data.get('delivery_cost', 0)
        if delivery_cost > 0:
            text += f"üöó <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_cost}‚ÇΩ\n"
        else:
            text += f"üéâ <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
        if discount > 0:
            text += f"üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 10%:</b> -{discount:.0f}‚ÇΩ\n"
        
        if bonus_used > 0:
            text += f"üíé <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> -{bonus_used:.0f}‚ÇΩ\n"
        
        text += f"\nüíµ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {final_amount}‚ÇΩ\n\n"

        text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"
        
        builder = ReplyKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        builder.adjust(1)
        
        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")

# @router.message(DeliveryStates.confirming_order, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
# async def confirm_delivery_order(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager = None):
#     """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
#     try:
#         data = await state.get_data()
#         cart = data.get('cart', [])
#         customer_name = data.get('customer_name')
#         customer_phone = data.get('customer_phone')
#         delivery_address = data.get('delivery_address')
#         bonus_used = data.get('bonus_used', 0)
#         discount = data.get('discount', 0)
#         subtotal = data.get('subtotal', 0)
#         delivery_cost = data.get('delivery_cost', 0)
#         total_before_discount = data.get('total_before_discount', 0)
        
#         if not cart:
#             await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
#             await state.clear()
#             return
        
#         # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
#         total_after_discount = total_before_discount - discount
#         final_amount = total_after_discount - bonus_used
        
#         # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
#         order_data = {
#             'items': cart,
#             'subtotal': subtotal,
#             'delivery_cost': delivery_cost,
#             'total': total_before_discount,  # –°—É–º–º–∞ –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –∏ –±–æ–Ω—É—Å–æ–≤
#             'discount': discount,
#             'bonus_used': bonus_used,
#             'final_amount': final_amount,
#             'delivery_address': delivery_address,
#             'customer_name': customer_name,
#             'customer_phone': customer_phone,
#             'delivery_time': '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'
#         }
        
#         # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
#         order_id = await db_manager.create_delivery_order(
#             user_id=message.from_user.id,
#             order_data=order_data,
#             discount_amount=discount,
#             bonus_used=bonus_used,
#             final_amount=final_amount
#         )
        
#         if order_id:
#             # üî• –ù–ê–ß–ò–°–õ–Ø–ï–ú –ö–ï–®–ë–≠–ö 5% –û–¢ –ó–ê–ö–ê–ó–ê
#             cashback_amount = await db_manager.calculate_order_cashback(final_amount)
#             if cashback_amount > 0:
#                 await db_manager.add_bonus_transaction(
#                     user_id=message.from_user.id,
#                     amount=cashback_amount,
#                     transaction_type='cashback',
#                     description=f'–ö–µ—à–±—ç–∫ 5% –æ—Ç –∑–∞–∫–∞–∑–∞ #{order_id}',
#                     order_id=order_id
#                 )
#                 logger.info(f"üíé –ù–∞—á–∏—Å–ª–µ–Ω –∫–µ—à–±—ç–∫ {cashback_amount}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –∑–∞ –∑–∞–∫–∞–∑ #{order_id}")
            
#             # üî• –ó–ê–ü–ò–°–´–í–ê–ï–ú –°–ü–ò–°–ê–ù–ò–ï –ë–û–ù–£–°–û–í (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å)
#             if bonus_used > 0:
#                 await db_manager.add_bonus_transaction(
#                     user_id=message.from_user.id,
#                     amount=-bonus_used,
#                     transaction_type='purchase',
#                     description=f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –±–æ–Ω—É—Å–∞–º–∏',
#                     order_id=order_id
#                 )
#                 logger.info(f"üí≥ –°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤ {bonus_used}‚ÇΩ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∑–∞ –∑–∞–∫–∞–∑ #{order_id}")
            
#             # üî• –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ë–û–ù–£–°–´
#             user = await db_manager.get_user(message.from_user.id)
#             if user and user.get('referrer_id') and discount > 0:
#                 success = await db_manager.complete_referral_bonus(message.from_user.id, order_id)
#                 if success:
#                     try:
#                         # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
#                         referrer = await db_manager.get_user(user['referrer_id'])
#                         bonus_notification = (
#                             f"üí∞ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n\n"
#                             f"üë§ {customer_name} —Å–¥–µ–ª–∞–ª(–∞) –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑.\n"
#                             f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: <b>200‚ÇΩ</b> –Ω–∞ —Å—á–µ—Ç\n"
#                             f"üí≥ –¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: {referrer.get('bonus_balance', 0)}‚ÇΩ"
#                         )
#                         await message.bot.send_message(
#                             chat_id=user['referrer_id'],
#                             text=bonus_notification,
#                             parse_mode="HTML"
#                         )
#                         logger.info(f"üë• –ù–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 200‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['referrer_id']}")
#                     except Exception as notify_error:
#                         logger.error(f"‚ùå Failed to notify referrer about bonus: {notify_error}")
            
#             # üî• –§–û–†–ú–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –û–ë –£–°–ü–ï–•–ï
#             success_text = (
#                 f"üéâ <b>–ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢!</b>\n\n"
#                 f"üõµ <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> #{order_id}\n"
#             )
            
#             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
#             if discount > 0:
#                 success_text += f"üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 10%:</b> -{discount:.0f}‚ÇΩ\n"
            
#             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã
#             if bonus_used > 0:
#                 success_text += f"üíé <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> -{bonus_used:.0f}‚ÇΩ\n"
            
#             # üî• –ü–û–ö–ê–ó–´–í–ê–ï–ú –ù–ê–ß–ò–°–õ–ï–ù–ù–´–ô –ö–ï–®–ë–≠–ö
#             if cashback_amount > 0:
#                 success_text += f"üí≥ <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ –∫–µ—à–±—ç–∫–∞:</b> +{cashback_amount:.0f}‚ÇΩ\n"
            
#             success_text += (
#                 f"üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> {final_amount}‚ÇΩ\n"
#                 f"‚è∞ <b>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> 30-45 –º–∏–Ω—É—Ç\n"
#                 f"üè† <b>–ê–¥—Ä–µ—Å:</b> {delivery_address}\n\n"
#                 f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {customer_phone}\n\n"
#                 f"<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçï</i>"
#             )
            
#             await message.answer(success_text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
            
#             # üî• –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
#             await notify_admins_about_delivery_order(
#                 bot=message.bot,
#                 order_id=order_id,
#                 order_data=order_data,
#                 customer_name=customer_name,
#                 customer_phone=customer_phone,
#                 total=final_amount,
#                 delivery_address=delivery_address,
#                 db_manager=db_manager
#             )
            
#             # üî• –õ–û–ì–ò–†–£–ï–ú –î–ï–ô–°–¢–í–ò–ï
#             await db_manager.add_user_action(
#                 user_id=message.from_user.id,
#                 action_type='delivery_order_created',
#                 action_data={
#                     'order_id': order_id, 
#                     'total': final_amount, 
#                     'discount': discount, 
#                     'bonus_used': bonus_used,
#                     'cashback_earned': cashback_amount
#                 }
#             )
            
#             logger.info(f"‚úÖ Delivery order #{order_id} created by user {message.from_user.id}, cashback: {cashback_amount}‚ÇΩ")
            
#             # üî• –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ò –ü–û–ö–ê–ó–´–í–ê–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
#             await state.clear()
#             await show_main_menu(message, l10n, db_manager)
            
#         else:
#             await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#             await state.clear()
            
#     except Exception as e:
#         logger.error(f"‚ùå Error confirming delivery order: {e}", exc_info=True)
#         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
#         await state.clear()


@router.message(DeliveryStates.confirming_order, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
async def confirm_delivery_ask_payment(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"""
    try:
        data = await state.get_data()
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞
        if not data.get('cart'):
            await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞.")
            await state.clear()
            return

        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\n"
        text += "üíµ ‚Äî –û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n"
        text += "üí≥ ‚Äî –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º (–ø–µ—Ä–µ–≤–æ–¥ / –∫–∞—Ä—Ç–∞). –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω.\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"

        builder = ReplyKeyboardBuilder()
        builder.button(text="üíµ –ö—É—Ä—å–µ—Ä—É –Ω–∞–ª–∏—á–Ω—ã–º–∏")
        builder.button(text="üí≥ –ü–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω)")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        builder.adjust(1)

        await state.set_state(PaymentStates.choosing_payment_method)
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")

    except Exception as e:
        logger.error(f"‚ùå Error asking payment method: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()


@router.message(PaymentStates.choosing_payment_method, F.text == "üíµ –ö—É—Ä—å–µ—Ä—É –Ω–∞–ª–∏—á–Ω—ã–º–∏")
async def payment_cash_on_delivery(
    message: Message,
    state: FSMContext,
    l10n: FluentLocalization,
    db_manager: DatabaseManager = None
):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É –∫—É—Ä—å–µ—Ä—É ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤."""
    try:
        data = await state.get_data()
        # –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –≤–¥—Ä—É–≥ –ø—É—Å—Ç–∞—è
        if not data.get('cart'):
            await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
            await state.clear()
            return

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º order_data –∏ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ---
        order_data = {
            'items': data.get('cart', []),
            'subtotal': data.get('subtotal', 0),
            'delivery_cost': data.get('delivery_cost', 0),
            'total': data.get('total_before_discount', 0),
            'discount': data.get('discount', 0),
            'bonus_used': data.get('bonus_used', 0),
            'final_amount': (data.get('total_after_discount', 0) - data.get('bonus_used', 0)),
            'delivery_address': data.get('delivery_address'),
            'customer_name': data.get('customer_name'),
            'customer_phone': data.get('customer_phone'),
            'delivery_time': data.get('delivery_time', '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'),
            # –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø—Ä—è–º–æ –≤ order_data
            'payment_method': 'cash'
        }

        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –≤ –ë–î
        order_id = await db_manager.create_delivery_order(
            user_id=message.from_user.id,
            order_data=order_data,
            discount_amount=data.get('discount', 0),
            bonus_used=data.get('bonus_used', 0),
            final_amount=order_data['final_amount']
        )

        if not order_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return

        # –Ø–≤–Ω–æ –∑–∞–¥–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ create_delivery_order –Ω–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ–≥–æ)
        await db_manager.update_order_payment_method(order_id, 'cash')

        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ preparing ‚Äî –æ—Å—Ç–∞–≤–ª—è—é –ª–æ–≥–∏–∫—É –∫–∞–∫ —Ä–∞–Ω–µ–µ
        await db_manager.update_delivery_order_status(order_id, 'preparing')

        # --- –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —É–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ---
        success_text = (
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω #{order_id}</b>\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {order_data['final_amount']}‚ÇΩ\n"
            f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 30-45 –º–∏–Ω—É—Ç\n"
            f"üè† –ê–¥—Ä–µ—Å: {order_data['delivery_address']}\n\n"
            f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏: {order_data['customer_phone']}\n\n"
            f"<i>–û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</i>"
        )
        await message.answer(success_text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())

        # --- –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º: –ø–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª–Ω—ã–π order_data —Å payment_method –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç ---
        admin_text = (
            f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order_data['customer_name']} (ID {message.from_user.id})\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_data['customer_phone']}\n"
            f"–ê–¥—Ä–µ—Å: {order_data['delivery_address']}\n\n"
            f"–°—É–º–º–∞: {order_data['final_amount']}‚ÇΩ\n"
            f"–û–ø–ª–∞—Ç–∞: <b>–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É."
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º order_id –∏ order_data
        # –ï—Å–ª–∏ notify_admins_about_delivery_order —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å admin_text.
        await notify_admins_about_delivery_order(
            bot=message.bot,
            order_id=order_id,
            order_data=order_data,
            customer_name=order_data['customer_name'],
            customer_phone=order_data['customer_phone'],
            total=order_data['final_amount'],
            delivery_address=order_data['delivery_address'],
            db_manager=db_manager,
            custom_admin_message=admin_text  # <-- –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
        )

        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await db_manager.add_user_action(
            user_id=message.from_user.id,
            action_type='delivery_order_created',
            action_data={'order_id': order_id, 'payment_method': 'cash'}
        )

        await state.clear()
        await show_main_menu(message, l10n, db_manager)

    except Exception as e:
        logger.error(f"‚ùå Error creating cash-on-delivery order: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        await state.clear()


@router.message(PaymentStates.choosing_payment_method, F.text == "üí≥ –ü–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω)")
async def payment_by_requisites(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager = None):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω"""
    try:
        data = await state.get_data()

        order_data = {
            'items': data.get('cart', []),
            'subtotal': data.get('subtotal', 0),
            'delivery_cost': data.get('delivery_cost', 0),
            'total': data.get('total_before_discount', 0),
            'discount': data.get('discount', 0),
            'bonus_used': data.get('bonus_used', 0),
            'final_amount': data.get('total_after_discount', 0) - data.get('bonus_used', 0),
            'delivery_address': data.get('delivery_address'),
            'customer_name': data.get('customer_name'),
            'customer_phone': data.get('customer_phone'),
            'delivery_time': data.get('delivery_time', '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
        }

        order_id = await db_manager.create_delivery_order(
            user_id=message.from_user.id,
            order_data=order_data,
            discount_amount=data.get('discount', 0),
            bonus_used=data.get('bonus_used', 0),
            final_amount=order_data['final_amount']
        )

        if not order_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã 'card' (–∏–ª–∏ 'bank_transfer')
        await db_manager.update_order_payment_method(order_id, 'card')
        # –û—Å—Ç–∞–≤–ª—è–µ–º payment_status = 'pending' (–∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–Ω–∞)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø—Ä–∏–Ω—è—Ç—å —Å–∫—Ä–∏–Ω
        await state.update_data(pending_payment_order_id=order_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –∏–∑ settings)
        payment_info = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã:\n\n"
            "‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <b>0000 0000 0000 0000</b>\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –û–û–û ¬´–†–µ—Å—Ç–æ—Ä–∞–Ω¬ª\n"
            "‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω (—Ñ–æ—Ç–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω."
        ).format(order_id=order_id)

        await message.answer(payment_info, parse_mode="HTML")
        await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã (—Ñ–æ—Ç–æ) –ø—Ä—è–º–æ –≤ —á–∞—Ç.", reply_markup=ReplyKeyboardBuilder().button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å").adjust(1).as_markup())

        await state.set_state(PaymentStates.waiting_payment_confirmation)

    except Exception as e:
        logger.error(f"‚ùå Error creating card-transfer order: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        await state.clear()

@router.message(PaymentStates.waiting_payment_confirmation, F.content_type.in_({ContentType.PHOTO, ContentType.TEXT}))
async def handle_payment_proof(message: Message, state: FSMContext, db_manager: DatabaseManager = None):
    """–ü—Ä–∏—ë–º —Å–∫—Ä–∏–Ω–∞ –æ–ø–ª–∞—Ç—ã (—Ñ–æ—Ç–æ) –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        order_id = data.get('pending_payment_order_id')
        if not order_id:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ
        if message.photo:
            # –ë–µ—Ä—ë–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            file_id = message.photo[-1].file_id
            note = "screenshot"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º receipt –≤ –ë–î (–Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å save_payment_receipt –≤ db_manager)
            await db_manager.save_payment_receipt(order_id=order_id, user_id=message.from_user.id, file_id=file_id, note=note)

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"payment_confirm_{order_id}")
            builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"payment_reject_{order_id}")
            builder.adjust(1)

            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –∏ —Å–æ–±—Ä–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            try:
                order = await db_manager.get_delivery_order_by_id(order_id)
            except Exception as e:
                logger.debug(f"Failed to fetch order #{order_id}: {e}")
                order = None

            # helpers (–ª–æ–∫–∞–ª—å–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
            import json
            import html
            import re

            def _strip_html_tags(text: str) -> str:
                return re.sub(r'<[^>]+>', '', text) if text else ""

            def _make_short(text: str, plain_limit: int = 1000, cut_chars: int = 900) -> str:
                """–ï—Å–ª–∏ plain-—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (–¥–æ cut_chars)."""
                if len(_strip_html_tags(text)) <= plain_limit:
                    return text
                # –æ–±—Ä–µ–∂–µ–º –ø–æ –≤–∏–¥–∏–º—ã–º —Å–∏–º–≤–æ–ª–∞–º (–±–µ–∑ HTML-—Ç–µ–≥–æ–≤) ‚Äî –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–µ–∑–∫–∞
                plain = _strip_html_tags(text)
                cut = plain[:cut_chars].rstrip()
                return html.escape(cut) + "..."

            # –°—Ç–∞—Ä—Ç—É–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)
            basic_info = (
                f"üí≥ <b>–ü–†–ò–ù–Ø–¢ –°–ö–†–ò–ù –û–ü–õ–ê–¢–´</b>\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {html.escape(message.from_user.full_name or '')} (ID {message.from_user.id})\n"
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑ ‚Äî –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª—è–º–∏
            if order:
                # –†–∞–∑–±–∏—Ä–∞–µ–º order_data (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ JSON-—Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ dict)
                order_data = order.get('order_data') or {}
                if isinstance(order_data, str):
                    try:
                        order_data = json.loads(order_data)
                    except Exception:
                        order_data = {}

                items = []
                if isinstance(order_data, dict):
                    items = order_data.get('items', []) or []

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º: "–ü–∏—Ü—Ü–∞ x2 ‚Äî 500‚ÇΩ"
                item_lines = []
                for it in items:
                    try:
                        name = html.escape(str(it.get('name', '‚Äî')))
                        qty = int(it.get('quantity', 1)) if it.get('quantity') is not None else 1
                        price = float(it.get('price', 0) or 0)
                        line_total = int(price * qty)
                        item_lines.append(f"‚Ä¢ {name} x{qty} ‚Äî {line_total}‚ÇΩ")
                    except Exception:
                        # –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue

                items_text = "\n".join(item_lines) if item_lines else "‚Ä¢ (—Å–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω)"

                # –°—É–º–º—ã –∏ —Å–∫–∏–¥–∫–∏
                total_amount = int(order.get('total_amount') or 0)
                final_amount = int(order.get('final_amount') or total_amount)
                discount_amount = int(order.get('discount_amount') or 0)
                bonus_used = int(order.get('bonus_used') or 0)

                # –û–ø–ª–∞—Ç–∞
                payment_method = order.get('payment_method') or (order_data.get('payment_method') if isinstance(order_data, dict) else None) or "‚Äî"
                payment_status = order.get('payment_status') or "‚Äî"

                # –ö–æ–Ω—Ç–∞–∫—Ç / –∞–¥—Ä–µ—Å
                customer_phone = html.escape(str(order.get('customer_phone') or "‚Äî"))
                delivery_addr = html.escape(str(order.get('delivery_address') or "‚Äî"))

                details = (
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
                    f"–ê–¥—Ä–µ—Å: {delivery_addr}\n\n"
                    f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
                    f"üí∞ –°—É–º–º–∞: {total_amount}‚ÇΩ\n"
                    f"üí∏ –ò—Ç–æ–≥ (–ø–æ—Å–ª–µ —Å–∫–∏–¥–æ–∫/–±–æ–Ω—É—Å–æ–≤): {final_amount}‚ÇΩ\n"
                    f"üîñ –°–∫–∏–¥–∫–∏: -{discount_amount}‚ÇΩ  üíé –ë–æ–Ω—É—Å—ã: -{bonus_used}‚ÇΩ\n"
                    f"üí≥ –û–ø–ª–∞—Ç–∞: {html.escape(str(payment_method))} ({html.escape(str(payment_status))})\n\n"
                )

                admin_text = basic_info + details + "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."
            else:
                # –Ω–µ—Ç –∑–∞–∫–∞–∑–∞ –≤ –ë–î ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                admin_text = basic_info + "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥–ø–∏—Å—å (caption) –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ admin_text —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.
            # –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ —Å caption (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~1024 —Å–∏–º–≤–æ–ª–∞ –≤ caption –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É).
            short_caption = None
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –ø–æ–∑–∏—Ü–∏–π
                if order:
                    short_items = item_lines[:2] if item_lines else []
                    short_items_preview = "\n".join(short_items) if short_items else "‚Ä¢ —Å–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω"
                    short_caption = (
                        f"üí≥ <b>–ü–†–ò–ù–Ø–¢ –°–ö–†–ò–ù –û–ü–õ–ê–¢–´</b>\n\n"
                        f"#{order_id} ‚Äî {html.escape(order.get('customer_name') or message.from_user.full_name)}\n"
                        f"{short_items_preview}\n\n"
                        f"–ò—Ç–æ–≥: {final_amount}‚ÇΩ | {html.escape(str(payment_method))} ({html.escape(str(payment_status))})"
                    )
                    # –µ—Å–ª–∏ –∏ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ ‚Äî –æ–±—Ä–µ–∂–µ–º
                    if len(_strip_html_tags(short_caption)) > 1000:
                        short_caption = _make_short(short_caption, plain_limit=1000, cut_chars=700)
            except Exception:
                short_caption = None

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é notify_admins_about_delivery_order
            # –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            from src.utils.config import settings
            admin_ids = [int(a.strip()) for a in settings.ADMIN_IDS.split(",")]
            for admin_id in admin_ids:
                try:
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å + –∫–Ω–æ–ø–∫–∏
                    await message.bot.send_photo(chat_id=admin_id, photo=file_id, caption=admin_text, parse_mode="HTML", reply_markup=builder.as_markup())
                except Exception as e:
                    logger.error(f"‚ùå Failed to forward payment proof to admin {admin_id}: {e}")

            await message.answer("‚úÖ –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return

        # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª) ‚Äî –Ω–∞–ø–æ–º–Ω–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω
        if message.text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã (—Ñ–æ—Ç–æ). –ë–µ–∑ —Å–∫—Ä–∏–Ω–∞ –∞–¥–º–∏–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É.")
            return

    except Exception as e:
        logger.error(f"‚ùå Error handling payment proof: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω–∞.")
        await state.clear()





@router.message(DeliveryStates.confirming_order, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_delivery_order(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await message.answer(
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await show_main_menu(message, l10n)

@router.message(DeliveryStates.viewing_cart, F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    await state.update_data(cart=[])
    await message.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await state.set_state(DeliveryStates.choosing_category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.get_delivery_categories_kb(l10n))

@router.message(DeliveryStates.viewing_cart, F.text == "üìã –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏")
async def continue_shopping(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏"""
    await state.set_state(DeliveryStates.choosing_category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await kb.get_delivery_categories_kb(l10n))

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def view_cart_from_anywhere(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    data = await state.get_data()
    cart = data.get('cart', [])
    
    if not cart:
        await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    text = "üõí <b>–í–ê–®–ê –ö–û–†–ó–ò–ù–ê</b>\n\n"
    subtotal = 0
    
    for item in cart:
        item_total = item['price'] * item['quantity']
        subtotal += item_total
        text += f"‚Ä¢ {item['name']} x{item['quantity']} - {item_total}‚ÇΩ\n"
    
    delivery_cost = 0 if subtotal >= 1500 else 200
    total = subtotal + delivery_cost
    
    text += f"\nüí∞ <b>–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b> {subtotal}‚ÇΩ\n"
    
    if delivery_cost > 0:
        text += f"üöó <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_cost}‚ÇΩ\n"
    else:
        text += f"üéâ <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
    
    text += f"üíµ <b>–ò—Ç–æ–≥–æ:</b> {total}‚ÇΩ\n"
    
    if subtotal < 500:
        text += f"\n‚ö†Ô∏è <i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 500‚ÇΩ</i>\n"
    
    builder = ReplyKeyboardBuilder()
    if cart:
        builder.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
        builder.button(text="üìã –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏")
        builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    builder.adjust(1)
    
    await state.set_state(DeliveryStates.viewing_cart)
    await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())



async def notify_admins_about_delivery_order(
    bot,
    order_id: int,
    order_data: dict,
    customer_name: str,
    customer_phone: str,
    total: float,
    delivery_address: str,
    db_manager=None,
    custom_admin_message: str = None
):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –¥–æ—Å—Ç–∞–≤–∫–∏.

    –£–ª—É—á—à–µ–Ω–∏—è:
    - –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (payment_method) –∏ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
    - –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º (card/bank_transfer) –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.
    - –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ db_manager –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω–∞–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (payment_receipts).
    - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç optional custom_admin_message ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ.
    """
    try:
        from src.utils.config import settings
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏)
        admin_ids = [int(a.strip()) for a in settings.ADMIN_IDS.split(",") if a.strip()]
        if not admin_ids:
            logger.warning("notify_admins_about_delivery_order: ADMIN_IDS –ø—É—Å—Ç–æ–π")
            return

        # –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        items_text = ""
        items = order_data.get('items', []) if order_data else []
        if items:
            items_text = "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
            for item in items:
                name = item.get('name', '‚Äî')
                qty = item.get('quantity', 1)
                price = item.get('price', 0)
                try:
                    line_sum = int(price) * int(qty)
                except Exception:
                    # –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç—Ä–æ–∫/None
                    try:
                        line_sum = float(price) * float(qty)
                    except Exception:
                        line_sum = 0
                items_text += f"‚Ä¢ {name} x{qty} ‚Äî {line_sum}‚ÇΩ\n"
            items_text += "\n"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å
        payment_method_raw = order_data.get('payment_method') if order_data else None
        payment_status = order_data.get('payment_status') if order_data else None

        # –ß–∏—Ç–∞–µ–º —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        pm_map = {
            'cash': "–ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É",
            'card': "–û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º / –∫–∞—Ä—Ç–æ–π (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)",
            'bank_transfer': "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã / –±–∞–Ω–∫ (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)",
            None: "–ù–µ —É–∫–∞–∑–∞–Ω"
        }
        payment_method_readable = pm_map.get(payment_method_raw, str(payment_method_raw))

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        if custom_admin_message:
            message_text = custom_admin_message
        else:
            message_text = (
                "üõµ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –î–û–°–¢–ê–í–ö–ò</b>\n\n"
                f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> #{order_id}\n"
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {customer_name}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {customer_phone}\n"
                f"üè† <b>–ê–¥—Ä–µ—Å:</b> {delivery_address}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {total}‚ÇΩ\n"
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {payment_method_readable}\n"
            )
            if payment_status:
                message_text += f"üìå <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> {payment_status}\n"
            message_text += "\n" + items_text
            message_text += f"‚è∞ <b>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data.get('delivery_time', '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')}\n\n"
            message_text += "<i>–ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</i>"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ + –¥–æ–ø. –∫–Ω–æ–ø–∫–∏ –¥–ª—è card/bank_transfer (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É)
        kb = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º/–∫–∞—Ä—Ç–µ)
        if payment_method_raw in ('card', 'bank_transfer'):
            kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"payment_confirm_{order_id}")
            kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"payment_reject_{order_id}")

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
        kb.button(text="üë®‚Äçüç≥ –í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ", callback_data=f"dashboard_start_{order_id}")
        kb.button(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"dashboard_call_{order_id}")

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ, –∏–Ω–∞—á–µ 1 –≤ —Å—Ç—Ä–æ–∫–µ
        if payment_method_raw in ('card', 'bank_transfer'):
            kb.adjust(2)  # –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã, —Ç.–∫. –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ–∫
        else:
            kb.adjust(1)

        # –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –≤ –ë–î ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö –ø–µ—Ä–≤—ã–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        receipts = []
        if db_manager:
            try:
                # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ db_manager —Ä–µ–∞–ª–∏–∑—É–µ—Ç get_payment_receipts_for_order(order_id)
                receipts = await db_manager.get_payment_receipts_for_order(order_id)
            except Exception as e:
                logger.debug(f"notify_admins_about_delivery_order: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å receipts –¥–ª—è {order_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º admin notification (–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ-–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏)
        for admin_id in admin_ids:
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å receipts ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É). –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                if receipts:
                    for r in receipts:
                        try:
                            file_id = r.get('file_id') or r.get('fileid') or r.get('file')
                            if file_id:
                                caption = f"üí≥ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}\n"
                                # –î–æ–±–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                                if r.get('note'):
                                    caption += f"{r.get('note')}\n"
                                await bot.send_photo(chat_id=admin_id, photo=file_id, caption=caption)
                        except Exception as e:
                            logger.debug(f"notify_admins_about_delivery_order: failed to send receipt to admin {admin_id}: {e}")

                # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.send_message(
                    chat_id=admin_id,
                    text=message_text,
                    reply_markup=kb.as_markup(),
                    parse_mode="HTML"
                )

                logger.info(f"‚úÖ Delivery order notification sent to admin {admin_id}")

                if db_manager:
                    # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ user_action (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ add_user_action)
                    try:
                        await db_manager.add_user_action(
                            user_id=admin_id,
                            action_type='delivery_order_notified',
                            action_data={'order_id': order_id, 'payment_method': payment_method_raw}
                        )
                    except Exception:
                        logger.debug("notify_admins_about_delivery_order: add_user_action failed (non-critical)")

            except Exception as e:
                logger.error(f"‚ùå Failed to notify admin {admin_id} about delivery order {order_id}: {e}")

    except Exception as e:
        logger.error(f"‚ùå Error in notify_admins_about_delivery_order: {e}", exc_info=True)

async def is_first_order(user_id: int, db_manager) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–≤—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_orders = await db_manager.get_delivery_orders_by_user(user_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üîç Checking first order for user {user_id}: found {len(delivery_orders)} delivery orders")
        
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–∞–∫ "—Ä–µ–∞–ª—å–Ω—ã–µ" –∑–∞–∫–∞–∑—ã
        completed_orders = [order for order in delivery_orders if order['status'] in ['delivered', 'completed']]
        
        logger.info(f"üîç Completed orders for user {user_id}: {len(completed_orders)}")
        
        return len(completed_orders) == 0  # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, —Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π
        
    except Exception as e:
        logger.error(f"‚ùå Error checking first order: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
    


async def recalculate_order_after_referral(state: FSMContext, db_manager: DatabaseManager, user_id: int):
    """–ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    try:
        data = await state.get_data()
        cart = data.get('cart', [])
        
        if not cart:
            return data
            
        # –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤
        subtotal = sum(item['price'] * item['quantity'] for item in cart)
        
        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = 0 if subtotal >= 1500 else 200
        total_before_discount = subtotal + delivery_cost
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
        user = await db_manager.get_user(user_id)
        discount = 0
        
        logger.info(f"üîç Recalculating order: user_id={user_id}, has_referrer={user and user.get('referrer_id')}")
        
        if user and user.get('referrer_id'):
            is_first = await is_first_order(user_id, db_manager)
            logger.info(f"üîç First order check: {is_first}")
            if is_first:
                discount = total_before_discount * 0.10
                logger.info(f"üîç Applying 10% discount: {discount}‚ÇΩ")
        
        total_after_discount = total_before_discount - discount
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        bonus_balance = await db_manager.get_user_bonus_balance(user_id)
        max_bonus_usage = total_after_discount * 0.6  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 60% –æ—Ç —Å—É–º–º—ã
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            subtotal=subtotal,
            delivery_cost=delivery_cost,
            total_before_discount=total_before_discount,
            discount=discount,
            total_after_discount=total_after_discount,
            bonus_balance=bonus_balance,
            max_bonus_usage=max_bonus_usage
        )
        
        logger.info(f"üî¢ Recalculated order: subtotal={subtotal}, delivery={delivery_cost}, discount={discount}, total_after_discount={total_after_discount}")
        
        return {
            'subtotal': subtotal,
            'delivery_cost': delivery_cost,
            'total_before_discount': total_before_discount,
            'discount': discount,
            'total_after_discount': total_after_discount,
            'bonus_balance': bonus_balance,
            'max_bonus_usage': max_bonus_usage
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error recalculating order after referral: {e}")
        return data