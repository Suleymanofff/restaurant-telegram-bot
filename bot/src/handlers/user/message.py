from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from fluent.runtime import FluentLocalization
from aiogram.fsm.context import FSMContext
from src.utils.config import settings
from aiogram.fsm.state import any_state


import src.handlers.user.keyboards as kb
from src.states.call_stuff import CallStaff
from src.states.greetings import Greeting
from src.utils.logger import get_logger
from src.utils.rate_limiter import staff_call_limit, reservation_limit, menu_view_limit

router = Router()
logger = get_logger(__name__)

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager=None):
    user = message.from_user
    logger.info(
        "üë§ /start command from user: %s (id: %s, username: %s)", 
        user.full_name, 
        user.id,
        f"@{user.username}" if user.username else "no username"
    )
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        referrer_id = None
        if len(message.text.split()) > 1:
            args = message.text.split()[1]
            if args.startswith('ref_'):
                referral_code = args[4:]  # –£–±–∏—Ä–∞–µ–º 'ref_'
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
                referrer = await db_manager.get_user_by_referral_code(referral_code)
                if referrer and referrer['user_id'] != user.id:
                    referrer_id = referrer['user_id']
                    logger.info(f"üéØ Referral detected: {user.id} referred by {referrer_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        if db_manager:
            await db_manager.add_user(
                user_id=user.id,
                username=user.username,
                full_name=user.full_name,
                language_code=user.language_code
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if referrer_id:
                success = await db_manager.set_user_referrer(user.id, referrer_id)
                if success:
                    # –î–æ–±–∞–≤–ª—è–µ–º pending –±–æ–Ω—É—Å (200‚ÇΩ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞)
                    await db_manager.add_referral_bonus(referrer_id, user.id, 200.00)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    try:
                        referrer_notification = (
                            f"üéâ <b>–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
                            f"üë§ {user.full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n"
                            f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>200‚ÇΩ</b> –ø–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!"
                        )
                        await message.bot.send_message(
                            chat_id=referrer_id,
                            text=referrer_notification,
                            parse_mode="HTML"
                        )
                    except Exception as notify_error:
                        logger.error(f"‚ùå Failed to notify referrer: {notify_error}")
            
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='start',
                action_data={'has_referrer': bool(referrer_id), 'referrer_id': referrer_id}
            )

        welcome_text = l10n.format_value("welcome-message")
        who_are_you_text = l10n.format_value("who-are-you")
        keyboard = await kb.get_sex_of_user_kb(l10n)

        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if referrer_id:
            welcome_text += "\n\nüéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å: 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!</b>"

        await message.answer(welcome_text, parse_mode="HTML")
        await message.answer(who_are_you_text, reply_markup=keyboard)
        await state.set_state(Greeting.get_sex)
        logger.info("üë§ /start command text shown to user %s", message.from_user.id)
    except Exception as e:
        logger.error(
            "‚ùå Failed to send /start command message to user %s: %s",
            user.id, e, exc_info=True
        )
        raise

@router.message(Command("menu"))
async def open_main_menu_from_command(message: Message, l10n: FluentLocalization, db_manager = None):
    await show_main_menu(message, l10n, db_manager)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message: Message, l10n: FluentLocalization, db_manager=None):
    user = message.from_user
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤
        is_admin = False
        is_staff = False
        user_rights = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ db_manager –¥–æ—Å—Ç—É–ø–µ–Ω
        if db_manager:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            await db_manager.ensure_user_exists(
                user_id=user.id,
                username=user.username,
                full_name=user.full_name
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            is_admin = await db_manager.is_admin(user.id)
            is_staff = await db_manager.is_staff(user.id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='main_menu_view'
            )
        else:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ settings
            from src.utils.config import settings
            is_admin = settings.is_admin(user.id)
            is_staff = settings.is_staff(user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if is_admin:
            user_rights.append("ADMIN")
        if is_staff:
            user_rights.append("STAFF")
        
        logger.info(
            "üë§ Open main menu for user: %s (id: %s, rights: %s)", 
            user.full_name, 
            user.id,
            user_rights or "USER"
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
        keyboard = await kb.get_main_menu_keyboard(
            l10n=l10n,
            user_id=user.id,
            db_manager=db_manager
        )
        
        welcome_text = l10n.format_value("main-menu-text")
        
        await message.answer(welcome_text, reply_markup=keyboard)
        logger.info("üë§ Main menu shown to user %s", user.id)
        
    except Exception as e:
        logger.error(
            "‚ùå Failed to send welcome message to user %s: %s",
            user.id, e, exc_info=True
        )
        
        # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        try:
            from src.utils.config import settings
            keyboard = await kb.get_main_menu_keyboard(l10n, user.id)
        except Exception:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—è
            from aiogram.utils.keyboard import ReplyKeyboardBuilder
            builder = ReplyKeyboardBuilder()
            builder.button(text="üçΩÔ∏è –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
            builder.button(text="üí∫ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
            builder.adjust(1, 1)
            keyboard = builder.as_markup(resize_keyboard=True)
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )

############################################################################# - –ú–µ–Ω—é (–Ω–∞—á–∞–ª–æ)
@router.message(F.text == "üìÉ –ú–µ–Ω—é")
async def get_menu(message: Message, l10n: FluentLocalization, db_manager = None):
    user = message.from_user
    logger.info(
        "üë§ Food menu button from user: %s (id: %s, username: %s)", 
        user.full_name, 
        user.id,
        f"@{user.username}" if user.username else "no username"
    )
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if db_manager:
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='menu_open'
            )

        menu_text = l10n.format_value("menu-title")
        await message.answer(text=menu_text, reply_markup=await kb.menu_food_types(l10n))
        logger.info("üë§ Food menu shown to user %s", message.from_user.id)
    except Exception as e:
        logger.error(
            "‚ùå Failed to send food menu to user %s: %s",
            user.id, e, exc_info=True
        )
        raise

#-----------------------------[–¢–∏–ø—ã –±–ª—é–¥]-----------------------------#
#-----------–ó–∞–≤—Ç—Ä–∞–∫–∏
@router.message(F.text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏")
async def breakfasts(message: Message, l10n: FluentLocalization, db_manager = None):
    user = message.from_user
    logger.info(
        "üë§ Main_menu->Menu->Breakfasts from user: %s (id: %s, username: %s)", 
        user.full_name, 
        user.id,
        f"@{user.username}" if user.username else "no username"
    )
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
        if db_manager:
            await db_manager.add_menu_view(
                user_id=user.id,
                category='breakfasts'
            )
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='menu_category_view',
                action_data={'category': 'breakfasts'}
            )

        link_to_breakfasts = "https://telegra.ph/ZAVTRAKI-10-04"
        await message.answer(text=link_to_breakfasts)
        logger.info("üë§ Main_menu->Menu->Breakfasts shown to user %s", message.from_user.id)
    except Exception as e:
        logger.error(
            "‚ùå Failed to send Main_menu->Menu->Breakfasts to user %s: %s",
            user.id, e, exc_info=True
        )
        raise

#-----------–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞
@router.message(F.text == "üç≤ –ì–æ—Ä—è—á–µ–µ")
async def hot_dishes(message: Message, l10n: FluentLocalization, db_manager = None):
    user = message.from_user
    logger.info(
        "üë§ Main_menu->Menu->Hot dishes from user: %s (id: %s, username: %s)", 
        user.full_name, 
        user.id,
        f"@{user.username}" if user.username else "no username"
    )
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
        if db_manager:
            await db_manager.add_menu_view(
                user_id=user.id,
                category='hot_dishes'
            )
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='menu_category_view',
                action_data={'category': 'hot_dishes'}
            )

        link_to_hot_dishes = "https://telegra.ph/GORYACHEE-10-04-2"
        await message.answer(text=link_to_hot_dishes)
        logger.info("üë§ Main_menu->Menu->Hot dishes shown to user %s", message.from_user.id)
    except Exception as e:
        logger.error(
            "‚ùå Failed to send Main_menu->Menu->Hot dishes to user %s: %s",
            user.id, e, exc_info=True
        )
        raise

#-----------–ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏
@router.message(F.text == "‚òï –ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏")
async def hot_drinks(message: Message, l10n: FluentLocalization, db_manager = None):
    user = message.from_user
    logger.info(
        "üë§ Main_menu->Menu->Hot drinks from user: %s (id: %s, username: %s)", 
        user.full_name, 
        user.id,
        f"@{user.username}" if user.username else "no username"
    )
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
        if db_manager:
            await db_manager.add_menu_view(
                user_id=user.id,
                category='hot_drinks'
            )
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='menu_category_view',
                action_data={'category': 'hot_drinks'}
            )

        link_to_hot_drinks = "https://telegra.ph/GORYACHIE-NAPITKI-10-04"
        await message.answer(text=link_to_hot_drinks)
        logger.info("üë§ Main_menu->Menu->Hot drinks shown to user %s", message.from_user.id)
    except Exception as e:
        logger.error(
            "‚ùå Failed to send Main_menu->Menu->Hot drinks to user %s: %s",
            user.id, e, exc_info=True
        )
        raise

#-----------–•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
@router.message(F.text == "üç∏ –•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏")
async def cold_drinks(message: Message, l10n: FluentLocalization, db_manager = None):
    user = message.from_user
    logger.info(
        "üë§ Main_menu->Menu->Cold drinks from user: %s (id: %s, username: %s)", 
        user.full_name, 
        user.id,
        f"@{user.username}" if user.username else "no username"
    )
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
        if db_manager:
            await db_manager.add_menu_view(
                user_id=user.id,
                category='cold_drinks'
            )
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='menu_category_view',
                action_data={'category': 'cold_drinks'}
            )

        link_to_cold_drinks = "https://telegra.ph/HOLODNYE-NAPITKI-10-04"
        await message.answer(text=link_to_cold_drinks)
        logger.info("üë§ Main_menu->Menu->Cold drinks shown to user %s", message.from_user.id)
    except Exception as e:
        logger.error(
            "‚ùå Failed to send Main_menu->Menu->Cold drinks to user %s: %s",
            user.id, e, exc_info=True
        )
        raise

#-----------–î–µ—Å–µ—Ä—Ç—ã
@router.message(F.text == "üç∞ –î–µ—Å–µ—Ä—Ç—ã")
async def desserts(message: Message, l10n: FluentLocalization, db_manager = None):
    user = message.from_user
    logger.info(
        "üë§ Main_menu->Menu->Desserts from user: %s (id: %s, username: %s)", 
        user.full_name, 
        user.id,
        f"@{user.username}" if user.username else "no username"
    )
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
        if db_manager:
            await db_manager.add_menu_view(
                user_id=user.id,
                category='desserts'
            )
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='menu_category_view',
                action_data={'category': 'desserts'}
            )

        link_to_desserts = "https://telegra.ph/DESERTY-10-04"
        await message.answer(text=link_to_desserts)
        logger.info("üë§ Main_menu->Menu->Desserts shown to user %s", message.from_user.id)
    except Exception as e:
        logger.error(
            "‚ùå Failed to send Main_menu->Menu->Desserts to user %s: %s",
            user.id, e, exc_info=True
        )
        raise

#=====–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, l10n: FluentLocalization, db_manager = None):
    await show_main_menu(message, l10n, db_manager)

############################################################################# - –ú–µ–Ω—é (–∫–æ–Ω–µ—Ü)

############################################################################# - –í—ã–∑–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª (–Ω–∞—á–∞–ª–æ)
@router.message(F.text == "üë®‚Äçüíº –í—ã–∑–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª")
@staff_call_limit(cooldown=30)  # 1 –≤—ã–∑–æ–≤ –≤ 30 —Å–µ–∫—É–Ω–¥
async def call_staff_handler(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager = None):
    user = message.from_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if db_manager:
        await db_manager.add_user_action(
            user_id=user.id,
            action_type='staff_call_start'
        )

    staff_text = l10n.format_value("call-staff-message")
    await state.set_state(CallStaff.table_number)
    await message.answer(text=staff_text)
    logger.info("üë®‚Äçüíº Staff call initiated by user %s", message.from_user.id)

@router.message(CallStaff.table_number)
async def confirm_staff_handler(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager = None, settings = None):
    user = message.from_user
    user_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞
    if not user_text.isdigit():
        text = l10n.format_value("error-enter-table-number")
        await message.answer(text=text)
        return
        
    table_number = int(user_text)
    if table_number < 1 or table_number > 99:
        text = l10n.format_value("error-enter-table-number")
        await message.answer(text=text)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–∑–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
    call_id = None
    if db_manager:
        call_id = await db_manager.add_staff_call(
            user_id=user.id,
            table_number=table_number
        )
        await db_manager.add_user_action(
            user_id=user.id,
            action_type='staff_call_created',
            action_data={'table_number': table_number, 'call_id': call_id}
        )

    if not call_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–∑–æ–≤–∞")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º call_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
    await state.update_data(call_id=call_id, table_number=table_number)

    staff_text = l10n.format_value(
        "confirm-staff-message",
        {"table-number": message.text}
    )
    await message.answer(text=staff_text, reply_markup=await kb.confirm_staff_message(l10n))
    logger.info("üë®‚Äçüíº Staff call created for user %s at table %s", user.id, table_number)
    
    # ‚úÖ –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∂–¥–µ–º callback

############################################################################# - –í—ã–∑–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª (–∫–æ–Ω–µ—Ü)


@router.message(F.text == "üó∫Ô∏è –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç__")
async def get_directions(message: Message, l10n: FluentLocalization, db_manager=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç'"""
    try:
        user = message.from_user
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if db_manager:
            await db_manager.add_user_action(
                user_id=user.id,
                action_type='get_directions_click'
            )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_address = settings.RESTAURANT_ADDRESS
        latitude = settings.RESTAURANT_LATITUDE
        longitude = settings.RESTAURANT_LONGITUDE

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞—Ä—Ç
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        builder = InlineKeyboardBuilder()
        
        # –°—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç
        google_maps_url = f"https://www.google.com/maps/dir/?api=1&destination={latitude},{longitude}"
        yandex_maps_url = f"https://yandex.ru/maps/?rtext=~{latitude},{longitude}"
        apple_maps_url = f"http://maps.apple.com/?daddr={latitude},{longitude}"
        
        builder.button(text="üó∫Ô∏è Google Maps", url=google_maps_url)
        builder.button(text="üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", url=yandex_maps_url)
        builder.button(text="üçé Apple Maps", url=apple_maps_url)
        builder.adjust(1)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üìç <b>–ù–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω</b>\n\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {restaurant_address}\n"
            f"üåê <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {latitude:.5f}, {longitude:.5f}\n\n"
            f"üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:</b>"
        )

        await message.answer(text, parse_mode="HTML", reply_markup=builder.as_markup())
        
        logger.info(f"üó∫Ô∏è Directions requested by user {user.id}")

    except Exception as e:
        logger.error(f"‚ùå Error in get_directions: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏.")










# # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# @router.message(F.text == "üí∫ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
# async def make_reservation(message: Message, l10n: FluentLocalization, db_manager = None):
#     # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
#     if db_manager:
#         await db_manager.add_user_action(
#             user_id=message.from_user.id,
#             action_type='reservation_start'
#         )
#     await message.answer("–§—É–Ω–∫—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# @router.message(F.text == "üõµ –î–æ—Å—Ç–∞–≤–∫–∞")
# async def delivery(message: Message, l10n: FluentLocalization, db_manager = None):
#     # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
#     if db_manager:
#         await db_manager.add_user_action(
#             user_id=message.from_user.id,
#             action_type='delivery_click'
#         )
#     await message.answer("–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# @router.message(F.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞")
# async def invite_friend(message: Message, l10n: FluentLocalization, db_manager = None):
#     # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
#     if db_manager:
#         await db_manager.add_user_action(
#             user_id=message.from_user.id,
#             action_type='invite_friend_click'
#         )
#     await message.answer("–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# @router.message(F.text == "üí≥ –ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
# async def loyalty_program(message: Message, l10n: FluentLocalization, db_manager = None):
#     # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
#     if db_manager:
#         await db_manager.add_user_action(
#             user_id=message.from_user.id,
#             action_type='loyalty_program_click'
#         )
#     await message.answer("–§—É–Ω–∫—Ü–∏—è –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# @router.message(F.text == "üó∫Ô∏è –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
# async def get_directions(message: Message, l10n: FluentLocalization, db_manager = None):
#     # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
#     if db_manager:
#         await db_manager.add_user_action(
#             user_id=message.from_user.id,
#             action_type='get_directions_click'
#         )
#     await message.answer("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# @router.message(Command("help"))
# async def help_handler(message: Message, l10n: FluentLocalization, db_manager = None):
#     user = message.from_user
#     logger.info(
#         "üë§ /help command from user: %s (id: %s, username: %s)", 
#         user.full_name, 
#         user.id,
#         f"@{user.username}" if user.username else "no username"
#     )

#     try:
#         # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
#         if db_manager:
#             await db_manager.add_user_action(
#                 user_id=user.id,
#                 action_type='help_command'
#             )

#         help_text = l10n.format_value("help-message")
#         await message.answer(help_text)
#         logger.info("‚úÖ /help message sent to user %s", user.id)
#     except Exception as e:
#         logger.error(
#             "‚ùå Failed to send welcome message to user %s: %s",
#             user.id, e, exc_info=True
#         )
#         raise




@router.message(Command("cancel"), any_state)
async def cancel_any_state(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
    logger.info(f"User {message.from_user.id} cancelled operation from state: {current_state}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message, l10n)
    
    await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")



@router.message(Command("help"))
async def help_command(message: Message, l10n: FluentLocalization, db_manager=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"""
    try:
        user = message.from_user
        user_id = user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if db_manager:
            await db_manager.add_user_action(
                user_id=user_id,
                action_type='help_command'
            )

        # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = (
            f"{l10n.format_value('help-title')}\n\n"
            f"{l10n.format_value('help-main-commands')}\n\n"
            f"{l10n.format_value('help-additional')}\n\n"
            f"{l10n.format_value('help-commands')}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if settings.is_admin(user_id):
            help_text += f"\n\n{l10n.format_value('help-admin')}"

        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö
        help_text += (
            f"\n\n{l10n.format_value('help-support')}\n\n"
            f"{l10n.format_value('help-contacts')}"
        )

        await message.answer(help_text, parse_mode="HTML")
        
        logger.info(f"üë§ Help command used by user: {user.full_name} (id: {user.id}, admin: {settings.is_admin(user_id)})")
        
    except Exception as e:
        logger.error(f"‚ùå Error in help command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# # Fallback —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @router.message()
# async def unknown_message(message: Message, l10n: FluentLocalization, db_manager = None):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã"""
#     if message.text:
#         logger.info("‚ùì Unknown message from user %s: %s", message.from_user.id, message.text)
        
#         # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
#         if db_manager:
#             await db_manager.add_user_action(
#                 user_id=message.from_user.id,
#                 action_type='unknown_message',
#                 action_data={'text': message.text}
#             )
            
#         help_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
#         await message.answer(help_text)