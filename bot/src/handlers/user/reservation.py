from datetime import date, datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, Contact
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.handlers.user.message import show_main_menu
from src.states.reservation import ReservationStates
from src.keyboards.calendar import Calendar
from src.utils.config import settings
from src.database.db_manager import DatabaseManager
from fluent.runtime import FluentLocalization
from src.utils.logger import get_logger
from src.utils.rate_limiter import rate_limit, reservation_limit
import src.handlers.user.keyboards as kb
from src.utils.time_utils import format_restaurant_time, parse_reservation_datetime

router = Router()
logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard(l10n: FluentLocalization):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reservation")
    )
    return builder.as_markup()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
def get_guests_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ 20 –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ 20
    for i in range(1, 21):
        builder.add(InlineKeyboardButton(text=str(i), callback_data=f"guests_{i}"))
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 5 —Ä—è–¥–æ–≤ –ø–æ 4 –∫–Ω–æ–ø–∫–∏
    builder.adjust(4, 4, 4, 4, 4)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reservation"))
    
    return builder.as_markup()

async def notify_admins_about_reservation(bot, reservation_data: dict, l10n: FluentLocalization):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    from src.utils.config import settings
    
    admin_ids = [int(admin_id.strip()) for admin_id in settings.ADMIN_IDS.split(",")]
    
    user_info = f"{reservation_data['user_full_name']}"
    if reservation_data.get('username'):
        user_info += f" (@{reservation_data['username']})"
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        reservation_datetime = parse_reservation_datetime(
            reservation_data['date'],
            reservation_data['time']
        )
        
        if reservation_datetime:
            formatted_time = format_restaurant_time(reservation_datetime)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if isinstance(reservation_data['date'], (datetime, date)):
                formatted_date = reservation_data['date'].strftime("%d.%m.%Y")
            else:
                try:
                    if '-' in str(reservation_data['date']):
                        year, month, day = map(int, str(reservation_data['date']).split('-'))
                        formatted_date = f"{day:02d}.{month:02d}.{year}"
                    else:
                        formatted_date = str(reservation_data['date'])
                except:
                    formatted_date = str(reservation_data['date'])
        else:
            formatted_time = reservation_data['time']
            formatted_date = reservation_data['date']
            
    except Exception as e:
        logger.error(f"‚ùå Error formatting time in admin notification: {e}")
        formatted_time = reservation_data['time']
        formatted_date = reservation_data['date']
    
    message_text = f"""
üÜï <b>–ù–æ–≤–∞—è –±—Ä–æ–Ω—å #{reservation_data['id']}</b>

üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}
üïê <b>–í—Ä–µ–º—è:</b> {formatted_time}
üë• <b>–ì–æ—Å—Ç–∏:</b> {reservation_data['guests']}
üë§ <b>–ò–º—è:</b> {reservation_data['name']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {reservation_data['phone']}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}
üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {reservation_data['user_id']}
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
            callback_data=f"admin_confirm_{reservation_data['id']}"
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
            callback_data=f"admin_reject_{reservation_data['id']}"
        )
    )
    
    keyboard = builder.as_markup()
    
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, message_text, parse_mode="HTML", reply_markup=keyboard)
            logger.info(f"‚úÖ Sent reservation notification to admin {admin_id} with correct timezone")
        except Exception as e:
            logger.error(f"‚ùå Failed to send notification to admin {admin_id}: {e}")

async def notify_user_about_reservation_status(bot, user_id: int, reservation_data: dict, l10n: FluentLocalization):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –±—Ä–æ–Ω–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        reservation_datetime = parse_reservation_datetime(
            reservation_data['date'], 
            reservation_data['time']
        )
        
        if reservation_datetime:
            formatted_time = format_restaurant_time(reservation_datetime)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∏–≤—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if isinstance(reservation_data['date'], (datetime, date)):
                formatted_date = reservation_data['date'].strftime("%d.%m.%Y")
            else:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
                try:
                    if '-' in str(reservation_data['date']):
                        # –§–æ—Ä–º–∞—Ç "2025-10-10" -> "10.10.2025"
                        year, month, day = map(int, str(reservation_data['date']).split('-'))
                        formatted_date = f"{day:02d}.{month:02d}.{year}"
                    else:
                        formatted_date = str(reservation_data['date'])
                except:
                    formatted_date = str(reservation_data['date'])
        else:
            # Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            formatted_time = str(reservation_data['time'])
            formatted_date = str(reservation_data['date'])
        
        status = reservation_data['status']
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        message_text = f"""
üìã –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –±—Ä–æ–Ω–∏ #{reservation_data['id']}

üìÖ –î–∞—Ç–∞: {formatted_date}
üïê –í—Ä–µ–º—è: {formatted_time}
üë• –ì–æ—Å—Ç–∏: {reservation_data['guests']}
üë§ –ò–º—è: {reservation_data['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {reservation_data['phone']}

üóíÔ∏è –°—Ç–∞—Ç—É—Å: {f"‚úÖ {status}" if status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" else f"‚ùå {status}"}
        """
        
        await bot.send_message(user_id, message_text)
        logger.info(f"‚úÖ Sent status notification to user {user_id} with correct timezone")
        
    except Exception as e:
        logger.error(f"‚ùå Error in notify_user_about_reservation_status: {e}")
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        fallback_text = f"""
üìã –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –±—Ä–æ–Ω–∏ #{reservation_data['id']}

–°—Ç–∞—Ç—É—Å: {f"‚úÖ {reservation_data['status']}" if reservation_data['status'] == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" else f"‚ùå {reservation_data['status']}"}

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.
        """
        await bot.send_message(user_id, fallback_text)

async def show_reservation_summary(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    
    summary_text = f"""
üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:

üìÖ –î–∞—Ç–∞: {data['selected_date']}
üïê –í—Ä–µ–º—è: {data['selected_time']}
üë• –ì–æ—Å—Ç–∏: {data['guests_count']}
üë§ –ò–º—è: {data['customer_name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['customer_phone']}
    """
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_reservation"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reservation")
    )
    
    await message.answer(summary_text, reply_markup=builder.as_markup())
    await state.set_state(ReservationStates.confirmation)

@router.message(F.text == "üçΩÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
@router.message(Command("reserve"))
@reservation_limit(cooldown=30)
async def start_reservation(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.set_state(ReservationStates.waiting_for_date)
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=Calendar.get_calendar_keyboard()
    )

@router.callback_query(F.data.startswith("calendar_"), ReservationStates.waiting_for_date)
async def process_calendar(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"""
    action = callback.data.split("_")[1]
    
    if action == "select":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É
        _, _, year, month, day = callback.data.split("_")
        # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        day = str(int(day))
        month = str(int(month))
        selected_date = f"{day}.{month}.{year}"
        
        await state.update_data(selected_date=selected_date)
        await state.set_state(ReservationStates.waiting_for_time)
        
        await callback.message.edit_text(
            f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {selected_date}:",
            reply_markup=Calendar.get_time_keyboard()
        )
        
    elif action in ["prev", "next"]:
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        _, _, year, month = callback.data.split("_")
        year, month = int(year), int(month)
        
        if action == "prev":
            if month == 1:
                year -= 1
                month = 12
            else:
                month -= 1
        else:
            if month == 12:
                year += 1
                month = 1
            else:
                month += 1
        
        await callback.message.edit_reply_markup(
            reply_markup=Calendar.get_calendar_keyboard(year, month)
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("time_select_"), ReservationStates.waiting_for_time)
async def process_time_selection(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    selected_time = callback.data.replace("time_select_", "")
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    availability = await db_manager.check_table_availability(
        data['selected_date'], selected_time, data.get('guests_count', 1)
    )
    
    if not availability["available"]:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—à–∏–±–æ–∫
        from src.utils.reservation_errors import get_reservation_error_message, ReservationError
        
        error_mapping = {
            "restaurant_closed": ReservationError.RESTAURANT_CLOSED,
            "past_date": ReservationError.PAST_DATE,
            "no_tables": ReservationError.NO_TABLES,
            "capacity_exceeded": ReservationError.CAPACITY_EXCEEDED,
            "invalid_guests_count": ReservationError.INVALID_GUESTS,
            "error": ReservationError.SERVICE_UNAVAILABLE
        }
        
        error_type = error_mapping.get(availability['reason'], ReservationError.SERVICE_UNAVAILABLE)
        error_message = get_reservation_error_message(error_type, availability.get('details'))
        
        await callback.message.edit_text(error_message)
        await callback.answer()
        return
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ...
    await state.update_data(selected_time=selected_time)
    
    if data.get('guests_count'):
        await state.set_state(ReservationStates.waiting_for_name)
        await callback.message.edit_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=get_cancel_keyboard(l10n)
        )
    else:
        await state.set_state(ReservationStates.waiting_for_guests)
        await callback.message.edit_text(
            "üë• –ù–∞ —Å–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –±—Ä–æ–Ω–∏—Ä—É–µ–º?",
            reply_markup=get_guests_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("guests_"), ReservationStates.waiting_for_guests)
async def process_guests_count_callback(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        guests = int(callback.data.replace("guests_", ""))
        
        data = await state.get_data()
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ—Å—Ç–µ–π
        if data.get('selected_time'):
            availability = await db_manager.check_table_availability(
                data['selected_date'], data['selected_time'], guests
            )
            
            if not availability["available"]:
                from src.utils.reservation_errors import get_reservation_error_message, ReservationError
                
                error_mapping = {
                    "restaurant_closed": ReservationError.RESTAURANT_CLOSED,
                    "past_date": ReservationError.PAST_DATE,
                    "no_tables": ReservationError.NO_TABLES,
                    "capacity_exceeded": ReservationError.CAPACITY_EXCEEDED,
                    "invalid_guests_count": ReservationError.INVALID_GUESTS,
                    "error": ReservationError.SERVICE_UNAVAILABLE
                }
                
                error_type = error_mapping.get(availability['reason'], ReservationError.SERVICE_UNAVAILABLE)
                error_message = get_reservation_error_message(error_type, availability.get('details'))
                
                await callback.message.edit_text(error_message)
                await callback.answer()
                return
        
        await state.update_data(guests_count=guests)
        await state.set_state(ReservationStates.waiting_for_name)
        
        await callback.message.edit_text(
            f"üë• –í—ã–±—Ä–∞–Ω–æ –≥–æ—Å—Ç–µ–π: {guests}\n\nüë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=get_cancel_keyboard(l10n)
        )
        
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {guests} –≥–æ—Å—Ç–µ–π")
        
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π")

@router.message(ReservationStates.waiting_for_guests, F.text)
async def process_guests_count_text(message: Message, state: FSMContext, l10n: FluentLocalization, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–æ–º - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        guests = int(message.text)
        if guests <= 0 or guests > 20:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20")
            return
        
        data = await state.get_data()
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if data.get('selected_time'):
            availability = await db_manager.check_table_availability(
                data['selected_date'], data['selected_time'], guests
            )
            
            if not availability["available"]:
                from src.utils.reservation_errors import get_reservation_error_message, ReservationError
                
                error_mapping = {
                    "restaurant_closed": ReservationError.RESTAURANT_CLOSED,
                    "past_date": ReservationError.PAST_DATE,
                    "no_tables": ReservationError.NO_TABLES,
                    "capacity_exceeded": ReservationError.CAPACITY_EXCEEDED,
                    "invalid_guests_count": ReservationError.INVALID_GUESTS,
                    "error": ReservationError.SERVICE_UNAVAILABLE
                }
                
                error_type = error_mapping.get(availability['reason'], ReservationError.SERVICE_UNAVAILABLE)
                error_message = get_reservation_error_message(error_type, availability.get('details'))
                
                await message.answer(error_message)
                return
        
        await state.update_data(guests_count=guests)
        await state.set_state(ReservationStates.waiting_for_name)
        
        await message.answer(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=get_cancel_keyboard(l10n)
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20 –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")

@router.message(ReservationStates.waiting_for_name, F.text)
async def process_customer_name(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        return
        
    await state.update_data(customer_name=name)
    await state.set_state(ReservationStates.waiting_for_phone)
    
    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=await kb.get_phone_keyboard_with_cancel(l10n)
    )

@router.message(ReservationStates.waiting_for_phone, F.contact)
async def process_contact(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = message.contact
    phone = contact.phone_number
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º + –µ—Å–ª–∏ –µ—Å—Ç—å)
    if phone.startswith('+'):
        phone = phone[1:]
    
    await state.update_data(customer_phone=phone)
    await show_reservation_summary(message, state, l10n)

@router.message(ReservationStates.waiting_for_phone, F.text)
async def process_customer_phone_text(message: Message, state: FSMContext, l10n: FluentLocalization):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_reservation(message, state, l10n)
        return
        
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) < 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
        
    await state.update_data(customer_phone=phone)
    await show_reservation_summary(message, state, l10n)

@router.callback_query(F.data == "confirm_reservation", ReservationStates.confirmation)
async def confirm_reservation(callback: CallbackQuery, state: FSMContext, db_manager: DatabaseManager, l10n: FluentLocalization, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –í–†–ï–ú–ï–ù–ï–ú"""
    data = await state.get_data()
    
    try:
        user = callback.from_user
        logger.info(f"üîÑ Starting ATOMIC reservation process for user {user.id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞—Ç–æ–º–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏
        reservation_id = await db_manager.create_reservation(
            user_id=user.id,
            reservation_date=data['selected_date'],
            reservation_time=data['selected_time'],
            guests_count=data['guests_count'],
            customer_name=data['customer_name'],
            customer_phone=data['customer_phone']
        )
        
        if reservation_id:
            logger.info(f"‚úÖ Reservation #{reservation_id} created successfully for user {user.id}")

            # –§–û–†–ú–ê–¢–ò–†–£–ï–ú –í–†–ï–ú–Ø –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
            from src.utils.time_utils import format_restaurant_time
            try:
                day, month, year = map(int, data['selected_date'].split('.'))
                hour, minute = map(int, data['selected_time'].split(':'))
                reservation_datetime = datetime(year, month, day, hour, minute)
                formatted_time = format_restaurant_time(reservation_datetime)
            except Exception as e:
                logger.error(f"‚ùå Error formatting time in user confirmation: {e}")
                formatted_time = data['selected_time']  # fallback

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏
            if db_manager:
                await db_manager.add_user_action(
                    user_id=user.id,
                    action_type='reservation_created',
                    action_data={
                        'reservation_id': reservation_id,
                        'date': data['selected_date'],
                        'time': data['selected_time'],
                        'guests': data['guests_count']
                    }
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –í–†–ï–ú–ï–ù–ï–ú
            success_text = f"""
‚úÖ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{reservation_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>

üìÖ <b>–î–∞—Ç–∞:</b> {data['selected_date']}
üïê <b>–í—Ä–µ–º—è:</b> {formatted_time}
üë• <b>–ì–æ—Å—Ç–∏:</b> {data['guests_count']}
üë§ <b>–ò–º—è:</b> {data['customer_name']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['customer_phone']}

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏.
            """
            
            await callback.message.edit_text(
                success_text,
                parse_mode="HTML",
                reply_markup=None
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = await kb.get_main_menu_keyboard(l10n, user.id)
            await callback.message.answer(
                "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=keyboard
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –í–†–ï–ú–ï–ù–ï–ú
            reservation_data = {
                'id': reservation_id,
                'date': data['selected_date'],
                'time': data['selected_time'],  # –ë—É–¥–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ notify_admins_about_reservation
                'guests': data['guests_count'],
                'name': data['customer_name'],
                'phone': data['customer_phone'],
                'user_id': user.id,
                'username': user.username,
                'user_full_name': user.full_name
            }
            
            await notify_admins_about_reservation(bot, reservation_data, l10n)
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –±—Ä–æ–Ω—å –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å
            logger.warning(f"‚ö†Ô∏è Reservation creation failed for user {user.id} - likely race condition")
            
            from src.utils.reservation_errors import get_reservation_error_message, ReservationError
            error_message = get_reservation_error_message(ReservationError.CONFLICT)
            
            await callback.message.edit_text(
                error_message,
                reply_markup=None
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è
            await callback.message.answer(
                "üïê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=Calendar.get_time_keyboard()
            )
            await state.set_state(ReservationStates.waiting_for_time)
            return
            
    except Exception as e:
        logger.error(f"‚ùå Reservation error for user {callback.from_user.id}: {e}", exc_info=True)
        
        from src.utils.reservation_errors import get_reservation_error_message, ReservationError
        error_message = get_reservation_error_message(ReservationError.SERVICE_UNAVAILABLE)
        
        await callback.message.edit_text(
            error_message,
            reply_markup=None
        )
        
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        if reservation_id:
            await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "back_to_calendar", ReservationStates.waiting_for_time)
async def back_to_calendar(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    await state.set_state(ReservationStates.waiting_for_date)
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=Calendar.get_calendar_keyboard()
    )
    await callback.answer()
    

@router.callback_query(F.data == "cancel_reservation")
@router.message(Command("cancel"), StateFilter(ReservationStates))
async def cancel_reservation(message: Message | CallbackQuery, state: FSMContext, l10n: FluentLocalization):
    """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.clear()
    
    text = "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text)
        await message.answer()
    else:
        await message.answer(text)


@router.callback_query(F.data.startswith("cancel_reservation_"))
async def cancel_reservation_callback(callback: CallbackQuery, db_manager=None, bot=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏"""
    try:
        reservation_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        
        logger.info(f"üîÑ User {user_id} cancelling reservation #{reservation_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏
        reservation = await db_manager.get_reservation_by_id(reservation_id)
        
        if not reservation:
            await callback.answer("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–Ω—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if reservation['user_id'] != user_id:
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –±—Ä–æ–Ω—å", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–Ω—å –µ—â–µ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if reservation['status'] in ['cancelled', 'completed']:
            await callback.answer("‚ÑπÔ∏è –≠—Ç–∞ –±—Ä–æ–Ω—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
            
        # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å
        success = await db_manager.update_reservation_status(reservation_id, "cancelled")
        
        if success:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            reservation_date = reservation['reservation_date']
            reservation_time = reservation['reservation_time']
            
            if hasattr(reservation_date, 'strftime'):
                formatted_date = reservation_date.strftime("%d.%m.%Y")
            else:
                formatted_date = str(reservation_date)
                
            if hasattr(reservation_time, 'strftime'):
                formatted_time = reservation_time.strftime("%H:%M")
            else:
                formatted_time = str(reservation_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º - —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
            try:
                await callback.message.edit_text(
                    f"‚ùå <b>–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                    f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –±—Ä–æ–Ω—å –Ω–∞ {formatted_date} "
                    f"–≤ {formatted_time}\n\n"
                    f"üë• –ì–æ—Å—Ç–∏: {reservation['guests_count']}\n"
                    f"üë§ –ò–º—è: {reservation['customer_name']}",
                    parse_mode="HTML",
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not edit reminder message: {e}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer("‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            await callback.answer("‚úÖ –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            # üîî –£–í–ï–î–û–ú–õ–Ø–ï–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
            await notify_admins_about_cancellation(bot, db_manager, reservation, callback.from_user)
            
            logger.info(f"‚úÖ Reservation #{reservation_id} cancelled by user {user_id}")
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏", show_alert=True)
            logger.error(f"‚ùå Failed to cancel reservation #{reservation_id}")
            
    except Exception as e:
        logger.error(f"‚ùå Error in cancel_reservation_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏", show_alert=True)

async def notify_admins_about_cancellation(bot, db_manager, reservation, user):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏"""
    try:
        admins = await db_manager.get_admins()
        
        if not admins:
            logger.warning("‚ö†Ô∏è No admins found to notify about cancellation")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        reservation_date = reservation['reservation_date']
        reservation_time = reservation['reservation_time']
        
        if hasattr(reservation_date, 'strftime'):
            formatted_date = reservation_date.strftime("%d.%m.%Y")
        else:
            formatted_date = str(reservation_date)
            
        if hasattr(reservation_time, 'strftime'):
            formatted_time = reservation_time.strftime("%H:%M")
        else:
            formatted_time = str(reservation_time)
            
        cancellation_text = (
            f"‚ùå <b>–ë–†–û–ù–¨ –û–¢–ú–ï–ù–ï–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {formatted_time}\n"
            f"üë• <b>–ì–æ—Å—Ç–∏:</b> {reservation['guests_count']}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {reservation['customer_name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {reservation['customer_phone']}\n"
            f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user.id}\n"
            f"üîç <b>Username:</b> @{user.username if user.username else '–Ω–µ—Ç'}\n"
            f"üÜî <b>ID –±—Ä–æ–Ω–∏:</b> {reservation['id']}\n\n"
            f"#–æ—Ç–º–µ–Ω–∞_–±—Ä–æ–Ω–∏"
        )
        
        for admin in admins:
            try:
                await bot.send_message(
                    chat_id=admin['user_id'],
                    text=cancellation_text,
                    parse_mode="HTML"
                )
                logger.info(f"‚úÖ Notified admin {admin['user_id']} about cancellation #{reservation['id']}")
            except Exception as e:
                logger.error(f"‚ùå Failed to notify admin {admin['user_id']}: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå Error notifying admins: {e}")