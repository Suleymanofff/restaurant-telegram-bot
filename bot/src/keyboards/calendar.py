from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from calendar import monthrange

class Calendar:
    @staticmethod
    def get_calendar_keyboard(year: int = None, month: int = None) -> InlineKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        now = datetime.now()
        if not year:
            year = now.year
        if not month:
            month = now.month
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        builder = InlineKeyboardBuilder()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        builder.row(
            InlineKeyboardButton(
                text="‚Üê", 
                callback_data=f"calendar_prev_{year}_{month}"
            ),
            InlineKeyboardButton(
                text=f"{month_names[month-1]} {year}", 
                callback_data="ignore"
            ),
            InlineKeyboardButton(
                text="‚Üí", 
                callback_data=f"calendar_next_{year}_{month}"
            )
        )
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        for day in week_days:
            builder.add(InlineKeyboardButton(text=day, callback_data="ignore"))
        
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        _, days_in_month = monthrange(year, month)
        first_day_weekday = datetime(year, month, 1).weekday()
        
        # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        for _ in range(first_day_weekday):
            builder.add(InlineKeyboardButton(text=" ", callback_data="ignore"))
        
        # –ö–Ω–æ–ø–∫–∏ —Å –¥–Ω—è–º–∏
        today = datetime.now().date()
        for day in range(1, days_in_month + 1):
            current_date = datetime(year, month, day).date()
            is_past = current_date < today
            is_today = current_date == today
            
            if is_past:
                builder.add(InlineKeyboardButton(
                    text=f"‚ùå{day}", 
                    callback_data="ignore"
                ))
            elif is_today:
                builder.add(InlineKeyboardButton(
                    text=f"üìç{day}", 
                    callback_data=f"calendar_select_{year}_{month:02d}_{day:02d}"
                ))
            else:
                builder.add(InlineKeyboardButton(
                    text=str(day), 
                    callback_data=f"calendar_select_{year}_{month:02d}_{day:02d}"
                ))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reservation")
        )
        
        builder.adjust(3, 7, *[7 for _ in range((days_in_month + first_day_weekday - 1) // 7 + 1)], 1)
        return builder.as_markup()

    @staticmethod
    def get_time_keyboard() -> InlineKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        builder = InlineKeyboardBuilder()
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        time_slots = [
            "10:00", "11:00", "12:00", "13:00", "14:00", "15:00",
            "16:00", "17:00", "18:00", "19:00", "20:00", "21:00"
        ]
        
        for time_slot in time_slots:
            builder.add(InlineKeyboardButton(
                text=time_slot, 
                callback_data=f"time_select_{time_slot}"
            ))
        
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_calendar"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reservation")
        )
        
        builder.adjust(3, 3, 3, 3, 2)
        return builder.as_markup()