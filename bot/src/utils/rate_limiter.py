from functools import wraps
from typing import Dict, Tuple
import time
from aiogram.types import Message, CallbackQuery
import logging
from collections import defaultdict

logger = logging.getLogger(__name__)

class RateLimiter:
    def __init__(self):
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {(user_id, action): [timestamps]}
        self.user_limits: Dict[Tuple[int, str], list] = defaultdict(list)
        self.cleanup_interval = 3600  # 1 —á–∞—Å
        self.last_cleanup = time.time()
    
    def check_limit(self, user_id: int, action: str, cooldown: int, max_requests: int = 1) -> Tuple[bool, float]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action: —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            cooldown: –≤—Ä–µ–º—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_requests: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
            
        Returns:
            (is_limited, remaining_time)
        """
        current_time = time.time()
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if current_time - self.last_cleanup > self.cleanup_interval:
            self.cleanup_old_entries()
            self.last_cleanup = current_time
        
        key = (user_id, action)
        timestamps = self.user_limits[key]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        timestamps = [ts for ts in timestamps if current_time - ts < cooldown]
        self.user_limits[key] = timestamps
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(timestamps) >= max_requests:
            oldest_timestamp = min(timestamps)
            remaining = cooldown - (current_time - oldest_timestamp)
            return True, max(0, remaining)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        timestamps.append(current_time)
        return False, 0
    
    def cleanup_old_entries(self, max_age: int = 86400):  # 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ max_age —Å–µ–∫—É–Ω–¥)"""
        current_time = time.time()
        keys_to_remove = []
        
        for key, timestamps in self.user_limits.items():
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            fresh_timestamps = [ts for ts in timestamps if current_time - ts < max_age]
            if fresh_timestamps:
                self.user_limits[key] = fresh_timestamps
            else:
                keys_to_remove.append(key)
        
        for key in keys_to_remove:
            del self.user_limits[key]
        
        if keys_to_remove:
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {len(keys_to_remove)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π rate limiting")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rate_limiter = RateLimiter()

def rate_limit(cooldown: int = 60, action: str = "default", max_requests: int = 1):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    
    Args:
        cooldown: –≤—Ä–µ–º—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        action: —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (–¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤)
        max_requests: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            user_id = None
            for arg in args:
                if isinstance(arg, (Message, CallbackQuery)):
                    user_id = arg.from_user.id
                    break
            
            if user_id is None:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –¥–ª—è rate limiting –≤ {func.__name__}")
                return await func(*args, **kwargs)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            is_limited, remaining = rate_limiter.check_limit(user_id, action, cooldown, max_requests)
            
            if is_limited:
                remaining_seconds = int(remaining)
                minutes = remaining_seconds // 60
                seconds = remaining_seconds % 60
                
                if minutes > 0:
                    time_text = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
                else:
                    time_text = f"{seconds} —Å–µ–∫"
                
                message_text = f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_text}."
                
                logger.info(f"üö´ Rate limit: user {user_id}, action '{action}', wait {remaining_seconds}s")
                
                if isinstance(args[0], Message):
                    await args[0].answer(message_text)
                elif isinstance(args[0], CallbackQuery):
                    await args[0].answer(message_text, show_alert=True)
                return
            
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            return await func(*args, **kwargs)
        return wrapper
    return decorator

# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
def staff_call_limit(cooldown: int = 30, max_requests: int = 3):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
    return rate_limit(cooldown=cooldown, action="staff_call", max_requests=max_requests)

def reservation_limit(cooldown: int = 30, max_requests: int = 2):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    return rate_limit(cooldown=cooldown, action="reservation_start", max_requests=max_requests)

def menu_view_limit(cooldown: int = 10, max_requests: int = 10):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é"""
    return rate_limit(cooldown=cooldown, action="menu_view", max_requests=max_requests)