import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta, date, time
from src.database.db_manager import DatabaseManager
from aiogram import Bot

class ReminderSystem:
    def __init__(self, bot: Bot, db_manager: DatabaseManager):
        self.bot = bot
        self.db_manager = db_manager
        self.is_running = False
        self.sent_reminders_24h = set()
        self.sent_reminders_3h = set()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.is_running = True
        while self.is_running:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –±—Ä–æ–Ω–∏
                await self.db_manager.update_expired_reservations()
                
                # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await self.check_reminders()
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            except Exception as e:
                print(f"Reminder system error: {e}")
                await asyncio.sleep(60)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.is_running = False
    
    async def check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        now = datetime.now()
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
        tomorrow_date = (now + timedelta(days=1)).strftime("%d.%m.%Y")
        tomorrow_reservations = await self.db_manager.get_reservations_for_date(tomorrow_date)
        
        for reservation in tomorrow_reservations:
            if (reservation['status'] == 'confirmed' and 
                reservation['id'] not in self.sent_reminders_24h):
                
                reservation_date = reservation['reservation_date']
                reservation_time = reservation['reservation_time']
                
                if isinstance(reservation_date, date) and isinstance(reservation_time, time):
                    reservation_datetime = datetime.combine(reservation_date, reservation_time)
                    time_until_reservation = reservation_datetime - now
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 23.5-24.5 —á–∞—Å–∞ –¥–æ –±—Ä–æ–Ω–∏
                    if timedelta(hours=23, minutes=30) <= time_until_reservation <= timedelta(hours=24, minutes=30):
                        await self.send_24h_reminder(reservation)
                        self.sent_reminders_24h.add(reservation['id'])
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 —á–∞—Å–∞
        today_date = now.strftime("%d.%m.%Y")
        today_reservations = await self.db_manager.get_reservations_for_date(today_date)
        
        for reservation in today_reservations:
            if (reservation['status'] == 'confirmed' and 
                reservation['id'] not in self.sent_reminders_3h):
                
                reservation_date = reservation['reservation_date']
                reservation_time = reservation['reservation_time']
                
                if isinstance(reservation_date, date) and isinstance(reservation_time, time):
                    reservation_datetime = datetime.combine(reservation_date, reservation_time)
                    time_until_reservation = reservation_datetime - now
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2.5-3.5 —á–∞—Å–∞ –¥–æ –±—Ä–æ–Ω–∏
                    if timedelta(hours=2, minutes=30) <= time_until_reservation <= timedelta(hours=3, minutes=30):
                        await self.send_3h_reminder(reservation)
                        self.sent_reminders_3h.add(reservation['id'])
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self._cleanup_old_reminders()
    
    def _cleanup_old_reminders(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –∫—ç—à–∞"""
        # –£–¥–∞–ª—è–µ–º ID –±—Ä–æ–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ (—Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π)
        current_ids_24h = set()
        current_ids_3h = set()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å ID –≤ –±–∞–∑–µ
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤
        if len(self.sent_reminders_24h) > 100:
            self.sent_reminders_24h.clear()
        if len(self.sent_reminders_3h) > 100:
            self.sent_reminders_3h.clear()
    
    async def send_24h_reminder(self, reservation):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        reservation_date = reservation['reservation_date']
        if isinstance(reservation_date, date):
            formatted_date = reservation_date.strftime("%d.%m.%Y")
        else:
            formatted_date = str(reservation_date)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        reservation_time = reservation['reservation_time']
        if isinstance(reservation_time, time):
            formatted_time = reservation_time.strftime("%H:%M")
        else:
            formatted_time = str(reservation_time)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", 
            callback_data=f"cancel_reservation_{reservation['id']}"
        )
        
        message_text = f"""
üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!</b>

–ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ —É –≤–∞—Å –±—Ä–æ–Ω—å –≤ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ.

üìÖ –î–∞—Ç–∞: {formatted_date}
üïê –í—Ä–µ–º—è: {formatted_time}
üë• –ì–æ—Å—Ç–∏: {reservation['guests_count']}

–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å:
"""
        
        try:
            await self.bot.send_message(
                reservation['user_id'], 
                message_text, 
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"  # –î–æ–±–∞–≤–ª—è–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            )
            print(f"üì® Sent 24h reminder for reservation #{reservation['id']} to user {reservation['user_id']}")
        except Exception as e:
            print(f"‚ùå Failed to send 24h reminder: {e}")
    
    async def send_3h_reminder(self, reservation):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 —á–∞—Å–∞"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        reservation_date = reservation['reservation_date']
        if isinstance(reservation_date, date):
            formatted_date = reservation_date.strftime("%d.%m.%Y")
        else:
            formatted_date = str(reservation_date)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        reservation_time = reservation['reservation_time']
        if isinstance(reservation_time, time):
            formatted_time = reservation_time.strftime("%H:%M")
        else:
            formatted_time = str(reservation_time)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", 
            callback_data=f"cancel_reservation_{reservation['id']}"
        )
        
        message_text = f"""
‚è∞ <b>–°–∫–æ—Ä–æ –≤—Å—Ç—Ä–µ—á–∞!</b>

–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞ —É –≤–∞—Å –±—Ä–æ–Ω—å –≤ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ.

üìÖ –î–∞—Ç–∞: {formatted_date}
üïê –í—Ä–µ–º—è: {formatted_time}
üë• –ì–æ—Å—Ç–∏: {reservation['guests_count']}

–ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç–µ, –æ—Ç–º–µ–Ω–∏—Ç–µ –±—Ä–æ–Ω—å:
"""
        
        try:
            await self.bot.send_message(
                reservation['user_id'],
                message_text, 
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"  # –î–æ–±–∞–≤–ª—è–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            )
            print(f"üì® Sent 3h reminder for reservation #{reservation['id']} to user {reservation['user_id']}")
        except Exception as e:
            print(f"‚ùå Failed to send 3h reminder: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_system = None

async def start_reminder_system(bot: Bot, db_manager: DatabaseManager):
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global reminder_system
    reminder_system = ReminderSystem(bot, db_manager)
    asyncio.create_task(reminder_system.start())

async def stop_reminder_system():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global reminder_system
    if reminder_system:
        await reminder_system.stop()