import os
import logging
from datetime import datetime, date
from typing import List, Dict, Any
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
import tempfile

logger = logging.getLogger(__name__)

class ReportGenerator:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def generate_daily_reservations_report(self, reservations: List[Dict[str, Any]]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        
        Returns:
            –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='wb', suffix='.xlsx', delete=False) as tmp_file:
                file_path = tmp_file.name
            
            # –°–æ–∑–¥–∞–µ–º workbook –∏ worksheet
            wb = Workbook()
            ws = wb.active
            ws.title = "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            headers = [
                "ID", "–í—Ä–µ–º—è", "–ì–æ—Å—Ç–∏", "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞", "–¢–µ–ª–µ—Ñ–æ–Ω",
                "–°—Ç–∞—Ç—É—Å", "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–°–æ–∑–¥–∞–Ω–æ", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
            ]
            
            # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_font = Font(bold=True, color="FFFFFF")
            header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            header_alignment = Alignment(horizontal="center", vertical="center")
            thin_border = Border(left=Side(style='thin'), right=Side(style='thin'),
                               top=Side(style='thin'), bottom=Side(style='thin'))
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = header_alignment
                cell.border = thin_border
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for row, reservation in enumerate(reservations, 2):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                reservation_time = reservation['reservation_time']
                if isinstance(reservation_time, str):
                    time_str = reservation_time
                else:
                    time_str = reservation_time.strftime("%H:%M")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                created_at = reservation['created_at']
                if isinstance(created_at, datetime):
                    created_str = created_at.strftime("%d.%m.%Y %H:%M")
                else:
                    created_str = str(created_at)
                
                # –°—Ç–∞—Ç—É—Å —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
                status_map = {
                    'pending': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ',
                    'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', 
                    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
                    'completed': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'
                }
                status_text = status_map.get(reservation['status'], reservation['status'])
                
                data_row = [
                    reservation['id'],
                    time_str,
                    reservation['guests_count'],
                    reservation['customer_name'],
                    reservation['customer_phone'],
                    status_text,
                    reservation['user_id'],
                    created_str,
                    reservation.get('notes', '')
                ]
                
                for col, value in enumerate(data_row, 1):
                    cell = ws.cell(row=row, column=col, value=value)
                    cell.border = thin_border
                    
                    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    if col in [1, 3, 7]:  # ID, –ì–æ—Å—Ç–∏, User ID
                        cell.alignment = Alignment(horizontal="center")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            column_widths = [8, 10, 8, 20, 15, 15, 12, 16, 25]
            for i, width in enumerate(column_widths, 1):
                ws.column_dimensions[get_column_letter(i)].width = width
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            ws.auto_filter.ref = f"A1:I{len(reservations) + 1}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            summary_row = len(reservations) + 3
            ws.cell(row=summary_row, column=1, value="–°–≤–æ–¥–∫–∞:").font = Font(bold=True)
            ws.cell(row=summary_row, column=2, value=f"–í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(reservations)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {}
            for reservation in reservations:
                status = reservation['status']
                status_counts[status] = status_counts.get(status, 0) + 1
            
            for i, (status, count) in enumerate(status_counts.items(), 1):
                status_text = status_map.get(status, status)
                ws.cell(row=summary_row + i, column=2, value=f"{status_text}: {count}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            wb.save(file_path)
            self.logger.info(f"‚úÖ Generated reservations report with {len(reservations)} entries")
            
            return file_path
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to generate reservations report: {e}")
            raise
    
    def cleanup_file(self, file_path: str):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            if os.path.exists(file_path):
                os.unlink(file_path)
                self.logger.debug(f"üßπ Cleared temporary file: {file_path}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Could not delete temporary file {file_path}: {e}")